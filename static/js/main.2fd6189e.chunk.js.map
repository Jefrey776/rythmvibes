{"version":3,"sources":["state.js","components/Sphere.js","components/AudioAnalyser.js","components/Plane.js","components/GeoContainer.js","App.js","reportWebVitals.js","index.js"],"names":["useStore","create","set","micAmp","updateMicAmp","amp","state","Sphere","props","mesh","React","useRef","useState","active","toggleActive","activeRotation","toggleActiveRotation","THREE","mousePos","setMousePos","size","color","heightSegments","widthSegments","posX","position","posY","posZ","rotX","rotY","rotZ","cI","setCI","handleChange","event","target","value","name","newCI","controllerInterface","style","backgroundColor","padding","opacity","borderRadius","x","y","z","rotationY","htmlfor","type","onChange","min","max","onClick","preventDefault","useFrame","ampRot","current","rotation","Fragment","ref","scale","console","log","point","getMouseWorld","args","MeshWobbleMaterial","attact","side","factor","speed","refractionRatio","roughness","wireframe","AudioAnalyser","navigator","mediaDevices","enumerateDevices","useEffect","getUserMedia","audio","video","then","stream","audioContext","AudioContext","analyser","createAnalyser","microphone","createMediaStreamSource","scriptProcessor","createScriptProcessor","smoothingTimeConstant","fftSize","connect","destination","onaudioprocess","array","Uint8Array","frequencyBinCount","getByteFrequencyData","average","reduce","a","length","catch","err","error","Plane","toggleWireframe","font","GeoContainer","geometries","updateGeometry","newName","updateNewName","visible","toggleVisibility","removeGeometry","index","closest","getAttribute","splice","handleToggle","inVisible","Visible","id","newGeo","selectedIndex","document","getElementById","newArray","push","map","geo","getGeoLI","App","getMicrophone","this","setState","height","margin","pixelRatio","window","devicePixelRatio","invalidateFrameloop","left","top","width","attach","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.2fd6189e.chunk.js","sourcesContent":["import create from 'zustand'\n\nexport const useStore = create(( set ) => ({\n    micAmp: 25,\n    updateMicAmp: (amp) => {        \n        return set(state => ({micAmp: amp}))\n    } \n  \n  })) \n  ","import { useFrame } from '@react-three/fiber'\nimport React, { useState } from 'react'\nimport { useStore } from '../state'\nimport * as THREE from 'three'\nimport { MeshWobbleMaterial } from '@react-three/drei'\n\nimport { Html } from '@react-three/drei/web/Html.cjs'\n\n/**\n * A Sphere Three.js Object, whose parameters are influences by the audio-input from the clients microphone\n * @param {object} param: The paramateters with which the 3d-Object is created. It includes:\n *  position: as an Array(3),\n *  color: as a HEX-value,\n *  size: as an Integer,\n *  heightSegments: the amount of heightSegments of the 3d-Object\n *  widthSegments: the amount of widthSegments of the 3d-Object\n *  rotX: the amount of static rotation on the x-axis\n *  rotY: the amount of static rotation on the y-axis\n *  rotZ: the amount of static rotation on the z-axis  \n * @return The react-three-fiber Sphere-Component\n**/ \nexport default function Sphere(props) {\n    const mesh = React.useRef();\n    //Visibility of ControllerInterface\n    const [ active, toggleActive ] = useState(false)\n    //Active Rotation\n    const [ activeRotation, toggleActiveRotation ] = useState(true)\n    //Amplitude of microphone input connected to global store\n    const [ amp ] = useStore(state => [ state.micAmp ])\n    //Mouse Position for positioning of controllerInterface\n    let [ mousePos, setMousePos ] = useState(new THREE.Vector3( 0, 0, -3 ));\n    //locally stored controller variables\n    let [ cI, setCI ] = useState({\n        size: props.size,\n        color: props.color,\n        heightSegments: props.heightSegments,\n        widthSegments: props.widthSegments,\n        posX: props.position[0],\n        posY: props.position[1],\n        posZ: props.position[2],\n        rotX: props.rotX,\n        rotY: props.rotY,\n        rotZ: props.rotZ\n    })\n\n    //toggle activeRotation \n    const handleActiveRotation = ( event ) => {\n        event.preventDefault();\n        toggleActiveRotation(!activeRotation)\n    }\n\n    //update values in controllerInput\n    const handleChange = (event) => {\n        const { value, name } = event.target;\n        let newCI = {...cI}\n        newCI[name] = value;\n        setCI(newCI)\n    }\n\n    const getMouseWorld = ( event ) => {\n        setMousePos( event.point )\n    }\n\n    const handleToggle = ( event ) => {\n        console.log(event)\n        getMouseWorld(event);\n\n        toggleActive(!active)\n    }\n\n    const style = {\n        backgroundColor: 'grey',\n        padding: '0.6em',\n        opacity: '0.7',\n        borderRadius: '0.5em'\n        \n    }\n\n    const controllerInterface = <Html style={style} position={ [mousePos.x, mousePos.y, mousePos.z] } rotationY={0.2}>\n                                    <div>\n                                        <form>\n                                            <h4>{props.name}</h4>\n                                            <br/>\n                                            <label htmlfor='color'>Farbe</label>\n                                            <br/>\n                                            <input type='color' name='color' value={cI.color} onChange={handleChange}/>\n\n                                            <br/>\n\n                                            <label htmlfor='size'>Größe</label>\n                                            <input type='range' name='size' value={cI.size} onChange={handleChange}/>\n\n                                            <label htmlfor='heightSegments'>heightSegments</label>\n                                            <input type='range' min={1} max={20} name='heightSegments' value={cI.heightSegments} onChange={handleChange}/>\n\n                                            <label htmlfor='widthSegments'>widthSegments</label>\n                                            <input type='range' min={1} max={20} name='widthSegments' value={cI.widthSegments} onChange={handleChange}/> \n\n                                            <br/>\n\n                                            <label htmlfor='X'>X</label>\n                                            <input type='range' min={-8.8} max={8.8} name='posX' value={cI.posX} onChange={handleChange}/>\n                                            <label htmlfor='Y'>Y</label>\n                                            <input type='range' min={-10} max={10} name='posY' value={cI.posY} onChange={handleChange}/>\n                                            <label htmlfor='Z'>Z</label>\n                                            <input type='range' min={-10} max={10} name='posZ' value={cI.posZ} onChange={handleChange}/>\n\n                                            <br/>\n\n                                            <button onClick={handleActiveRotation}>Toggle active rotation</button>\n                                            <label htmlfor='rotX'>Rotation X</label>\n                                            <input type='range' min={-100} max={100} name='rotX' value={cI.rotX} onChange={handleChange}/>\n                                            <label htmlfor='rotY'>Rotation Y</label>\n                                            <input type='range' min={-100} max={100} name='rotY' value={cI.rotY} onChange={handleChange}/>\n                                            <label htmlfor='rotZ'>Rotation Z</label>\n                                            <input type='range' min={-100} max={100} name='rotZ' value={cI.rotZ} onChange={handleChange}/>\n                                        </form>\n                                    </div>\n                                </Html>\n\n    //apply rotation on every frame\n    useFrame(() => {\n        if(activeRotation) {\n            var ampRot = amp/50;\n            mesh.current.rotation.x += (cI.rotX/1000) * ampRot;\n            mesh.current.rotation.y += (cI.rotY/1000) * ampRot;\n            mesh.current.rotation.z += (cI.rotZ/1000) * ampRot;\n        }\n    })\n\n\n\n    return(\n        <React.Fragment>\n\n        {active ? controllerInterface : null}\n\n        <mesh\n            position={[cI.posX, cI.posY, cI.posZ]}\n            ref={mesh}\n            scale={cI.size/10+amp/40}\n            onClick={handleToggle}\n            rotation={[cI.rotX, cI.rotY, cI.rotZ]}\n            >\n            \n            <sphereGeometry args={[1, cI.heightSegments+amp*20, cI.widthSegments*(amp/35)]} />\n            \n            <MeshWobbleMaterial \n                attact='material'\n                color={cI.color}\n                side={THREE.DoubleSide}\n                factor={1*(amp)}\n                speed={0.2*(0.01/amp)}\n                refractionRatio={3}\n                roughness={0.2}\n                wireframe={false}\n                />\n          </mesh>\n          </React.Fragment >\n\n    )\n}","import { useFrame } from '@react-three/fiber';\nimport React, { useEffect, useState } from 'react';\nimport { Html } from '@react-three/drei/web/Html.cjs'\nimport { useStore } from '../state';\nimport MicrophoneStream from 'microphone-stream';\n\n\nconst style = {\n  padding: '1em',\n  width: '100%',\n  backgroundColor: 'gray',\n  borderRadius: '0.5em'\n}\nconst selectStyle = {\n  padding: '0em 1em',\n  margin: '1em',\n  width: '100%'\n}\n\nexport default function AudioAnalyser(props) {\n  const [updateMicAmp] = useStore(state => [ state.updateMicAmp ])\n\n  //case privacy doesnt allow access\n  if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n    console.log(\"enumerateDevices() not supported.\");   \n  }\n  \n  useEffect(() => {\n    //get Permission to read System inputs and outputs and add eventlistener to process input stream\n    navigator.mediaDevices.getUserMedia({\n    audio: true,\n    video: true\n  })\n    .then(function(stream) {\n      const audioContext = new AudioContext();\n      const analyser = audioContext.createAnalyser();\n      const microphone = audioContext.createMediaStreamSource(stream);\n      const scriptProcessor = audioContext.createScriptProcessor(2048, 1, 1);\n  \n      analyser.smoothingTimeConstant = 0.8;\n      analyser.fftSize = 64;\n  \n      microphone.connect(analyser);\n      analyser.connect(scriptProcessor);\n      scriptProcessor.connect(audioContext.destination);\n      scriptProcessor.onaudioprocess = function() {\n        const array = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(array);\n        const arraySum = array.reduce((a, value) => a + value, 0);\n        const average = arraySum / array.length;\n        updateMicAmp(average)\n      };\n    })\n    .catch(function(err) {\n      /* handle the error */\n      console.error(err);\n    });\n  }, [])\n\n\n\n  return (\n    <React.Fragment >\n           \n    </React.Fragment>\n  )  \n}\n{/* <Html position={[-6, 6,-3]} rotationY={0.2}>\n<form style={style}>\n  <label htmlfor='type'>Audio-Quelle</label>\n  <select name='type' style={selectStyle} >\n    {allDevices.map(device => \n      <option value={device.deviceId}>{device.label}</option>\n    )}\n  </select>\n</form>\n</Html>    */}","import * as THREE from 'three'\nimport React, { useState } from 'react'\nimport { MeshWobbleMaterial } from '@react-three/drei'\nimport { useStore } from '../state'\nimport shallow from 'zustand/shallow'\nimport { Html } from '@react-three/drei/web/Html.cjs'\n\n/**\n * A Plane Three.js Object, whose parameters are influences by the audio-input from the clients microphone\n * @param {object} param: The paramateters with which the 3d-Object is created. It includes:\n *  position: as an Array(3),\n *  color: as a HEX-value,\n *  size: as an Integer,\n *  heightSegments: the amount of heightSegments of the 3d-Object\n *  widthSegments: the amount of widthSegments of the 3d-Object\n *  rotX: the amount of static rotation on the x-axis\n *  rotY: the amount of static rotation on the y-axis\n *  rotZ: the amount of static rotation on the z-axis  \n * @return The react-three-fiber Plane-Component\n**/ \nexport default function Plane(props) {\n    const mesh = React.useRef();\n    //Visibility of ControllerInterface\n    const [ active, toggleActive ] = useState(false)\n    //Visibility of wireframe\n    const [ wireframe, toggleWireframe ] = useState(false)\n    //Amplitude of microphone input connected to global store\n    const [ amp ] = useStore(state => [ state.micAmp ])\n    //Mouse Position for positioning of controllerInterface\n    let [ mousePos, setMousePos ] = useState(new THREE.Vector3( 0, 0, -3 ));\n    //locally stored controller variables\n    let [ cI, setCI ] = useState({\n        size: props.size,\n        color: props.color,\n        heightSegments: props.heightSegments,\n        widthSegments: props.widthSegments,\n        posX: props.position[0],\n        posY: props.position[1],\n        posZ: props.position[2],\n        rotX: props.rotX,\n        rotY: props.rotY,\n        rotZ: props.rotZ\n    })\n\n    const handleChange = ( event ) => {\n        const { value, name } = event.target;\n        let newCI = {...cI}\n        newCI[name] = value;\n        setCI(newCI)\n    }\n\n    //Toggle wireframe visibility\n    const handleWireframe = () => {\n        toggleWireframe(!wireframe)\n    }\n\n    const getMouseWorld = ( event ) => {\n        setMousePos( event.point )\n    }\n\n    const handleToggle = ( event ) => {\n        getMouseWorld(event);\n        toggleActive(!active)\n    }\n\n    const style = {\n        backgroundColor: 'grey',\n        padding: '0.6em',\n        opacity: '0.7',\n        borderRadius: '0.5em'\n    }\n\n    const controllerInterface = <Html style={style} position={ [10.7, 1, -5] } rotationY={0.2}>\n                                    <div>\n                                        <form>\n                                            <h4>{props.name}</h4>\n\n                                            <br/>\n\n                                            <label htmlfor='color'>Farbe</label>\n                                            <br/>\n                                            <input type='color' name='color' value={cI.color} onChange={handleChange}/>\n\n                                            <br/>\n                                            \n                                            <label htmlfor='wireframe'>Wireframe On</label>\n                                            <input type='checkbox' onChange={handleWireframe}/>\n   \n\n                                            <label htmlfor='size'>Größe</label>\n                                            <input type='range' name='size' min={-10} max={10}value={cI.size} onChange={handleChange}/>\n\n                                            <label htmlfor='heightSegments'>heightSegments</label>\n                                            <input type='range' min={1} max={200} name='heightSegments' value={cI.heightSegments} onChange={handleChange}/>\n\n                                            <label htmlfor='widthSegments'>widthSegments</label>\n                                            <input type='range' min={1} max={200} name='widthSegments' value={cI.widthSegments} onChange={handleChange}/> \n\n                                            <br/>\n\n                                            <label htmlfor='X'>X</label>\n                                            <input type='range' min={-8.8} max={8.8} name='posX' value={cI.posX} onChange={handleChange}/>\n                                            <label htmlfor='Y'>Y</label>\n                                            <input type='range' min={-20} max={10} name='posY' value={cI.posY} onChange={handleChange}/>\n                                            <label htmlfor='Z'>Z</label>\n                                            <input type='range' min={-10} max={10} name='posZ' value={cI.posZ} onChange={handleChange}/>\n\n                                            <br/>\n\n                                            <label htmlfor='rotX'>Rotation X</label>\n                                            <input type='range' min={-360} max={360} name='rotX' value={cI.rotX} onChange={handleChange}/>\n                                            <label htmlfor='rotY'>Rotation Y</label>\n                                            <input type='range' min={-360} max={360} name='rotY' value={cI.rotY} onChange={handleChange}/>\n                                            <label htmlfor='rotZ'>Rotation Z</label>\n                                            <input type='range' min={-360} max={360} name='rotZ' value={cI.rotZ} onChange={handleChange}/>\n                                        </form>\n                                    </div>\n                                </Html>\n\n\n    return(\n        <React.Fragment>\n\n        {active ? controllerInterface : null}\n\n        <mesh\n            position={[cI.posX, cI.posY, cI.posZ]}\n            ref={mesh}\n            scale={cI.size/10}\n            onClick={handleToggle}\n            rotation={[cI.rotX/100, cI.rotY/100, cI.rotZ/100]}\n            >\n            \n            <planeGeometry \n                args={[1000, 1000, cI.heightSegments, cI.widthSegments]} \n                />\n            <MeshWobbleMaterial \n                attact='material'\n                color={cI.color}\n                side={THREE.DoubleSide}\n                factor={0.41}\n                speed={1}\n                refractionRatio={3}\n                roughness={0.2}\n                wireframe={wireframe}\n                />\n\n          </mesh>\n          </React.Fragment >\n\n    )\n}","import React, { useState } from 'react';\nimport Sphere from './Sphere';\nimport Plane from './Plane';\nimport { Html } from '@react-three/drei/web/Html.cjs'\n\nconst style = {\n    backgroundColor: 'grey',\n    padding: '0.6em',\n    opacity: '0.7',\n    borderRadius: '0.5em',\n    font: 'Arial'\n}\n\n/**\n * GeometryContainer\n * @returns React.Component containing a html interface to manage the geometry\n */\nexport default function GeoContainer() {\n    //An array containing all the geometries being rendered on screen\n    const [ geometries, updateGeometry ] = useState([\n        <Sphere type={'Sphere'} name={'Sphere1'} position={[0, 0, -4]} color={'#ECB365'} size={10} heightSegments={2} widthSegments={10} rotX={-28} rotY={-12} rotZ={-10}/>,\n        <Plane type={'Plane'} name={'Background'} position={[-2.8, -10, -1]} color={\"#041C32\"} size={1} heightSegments={50} widthSegments={50} rotX={-65} rotY={-1} rotZ={2}/>                              \n    ])\n\n    //Name of new Geometry\n    const [ newName, updateNewName ] = useState('');\n\n    //Toggle visibility\n    const [ visible, toggleVisibility ] = useState('true')\n\n    //Build Display of geometry\n    const getGeoLI = ( name, index ) => {\n        return <li index={index} >\n                {name}\n                <button onClick={removeGeometry}>remove</button>\n            </li>\n    }\n\n    //Add a geometry to the scene\n    const addGeometry = ( event ) => {\n        event.preventDefault();\n        var select = document.getElementById(\"selectType\")\n        var selectedIndex = select.selectedIndex;\n        var newArray = geometries;\n        var newGeo;\n        switch (selectedIndex) {\n        case 0:\n            newGeo = <Sphere type={'Sphere'} name={newName} position={[0, 0, -2]} color={'green'} size={10} heightSegments={2} widthSegments={10} rotX={-28} rotY={-12} rotZ={-10}/>\n            \n            newArray.push(newGeo)\n            updateGeometry([...geometries])\n            break;\n        case 1:\n            newGeo = <Plane type={'Plane'} name={newName} position={[-2.8, -10, -1]} color={\"red\"} size={1} heightSegments={50} widthSegments={50} rotX={-65} rotY={-1} rotZ={2}/>\n            \n            geometries.push(newGeo)\n            updateGeometry([...geometries])\n            break;\n        default:\n            console.log('a geometry-type needs to be selected')\n        \n        }\n    }\n\n    //remove a geometry from the scene\n    const removeGeometry = ( event ) => {\n        const index = event.target.closest('li').getAttribute('index')\n        geometries.splice(index, 1)\n        console.log(geometries)\n\n        updateGeometry([...geometries])\n    }\n\n    //Handle Change in input field, to differentiate between new geos in list\n    const handleChange = ( event ) => {\n        const  value  = event.target.value\n\n        updateNewName(value)\n    }\n\n    //Toggle Visibility of interface\n    const handleToggle = () => {\n        toggleVisibility(!visible);\n    }\n\n    //hidden version of the interface\n    const inVisible = <button onClick={handleToggle}>Show</button>\n    //visible version of the interface\n    const Visible = <>\n                        <button onClick={handleToggle}>Hide</button>\n                        <h1>All Geometries</h1>\n                        <form>\n                            <h2 >Typ:</h2>\n                            <select id={\"selectType\"}>\n                                <option value={'sphere'}>Sphere</option>\n                                <option value={'plane'}>Plane</option>\n                            </select>\n                            <input type={'text'} value={newName} onChange={handleChange} />\n                            <button onClick={addGeometry}> Add Geometry</button>\n                        </form>\n                        <ul>\n                            {geometries.map(( geo, index ) => getGeoLI(geo.props.name, index))}   \n                        </ul>\n                    </>\n    \n    return (\n        <React.Fragment>\n\n        <Html style={style} position={[-10.7, 6, -3]}>\n           { visible ? Visible : inVisible } \n        </Html>\n        {geometries.map(geo => geo)}\n        </React.Fragment>\n    )\n}","import { Canvas } from '@react-three/fiber'\nimport React from 'react'\nimport Sphere from './components/Sphere';\nimport AudioAnalyser from './components/AudioAnalyser';\nimport Plane from './components/Plane';\nimport GeoContainer from './components/GeoContainer';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      audio: null,\n      audioContext: null,\n      analyser: null\n    }\n    this.getMicrophone();\n  }\n\n  async getMicrophone() {\n    const audio = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: false\n    });\n\n    console.log(audio)\n  \n    this.setState({ audio })\n  }\n\n  render() {\n    console.log(this.state)\n    return (\n      <div style={{height: '1000px', margin: '-200px', height: '2000em', backgroundColor:'black'}} >\n        <Canvas   pixelRatio={window.devicePixelRatio}\n                  invalidateFrameloop={false}\n                  style={{ position: 'absolute', left: '0', top: '0', width: '100%', height: '100%' }}>\n          <ambientLight />\n          <fog attach=\"fog\" args={[\"lightgrey\", 5, 40]} />\n\n          <pointLight position={[10, 10, 10]} />\n\n          <GeoContainer />   \n\n          {this.getMicrophone}\n          <AudioAnalyser audio={ this.state.audio } />     \n        </Canvas>              \n      </div>\n    )\n  }\n}\n\n{/* <Sphere position={[0, 0, -4]} color={'#ECB365'} size={10} heightSegments={2} widthSegments={10} rotX={-28} rotY={-12} rotZ={-10}/>                              \n<Plane position={[-2.8, -10, -1]} color={\"#041C32\"} size={1} heightSegments={50} widthSegments={50} rotX={-65} rotY={-1} rotZ={2}/>                               */}\n\n\n{/* <GeoContainer id={uniqid()}type={'box'} position={[0,0,-10]} color={'#ff00ff'} size={50}/>  */}\n{/* <Sphere position={[-2.8, -10, -1]} color={\"#a3bd47\"} size={99} heightSegments={20} widthSegments={2} rotX={-2} rotY={-1} rotZ={2}/>                               */}\n{/* <Sphere position={[6, -2, -10]} color={'#DE834D'} size={50} heightSegments={20} widthSegments={2} rotX={8} rotY={10} rotZ={-10}/>                               */}\n\n{/* <Box position={[0,0,-10]} color={'#ff00ff'} size={50}/> */}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n          <App />,\n  document.getElementById('root')\n);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}