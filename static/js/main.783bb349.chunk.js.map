{"version":3,"sources":["components/Sphere.js","components/AudioAnalyser.js","App.js","reportWebVitals.js","index.js"],"names":["Sphere","props","mesh","React","useRef","useState","active","toggleActive","size","color","heightSegments","widthSegments","posX","position","posY","posZ","rotX","activeRot","rotY","rotZ","cI","setCI","handleChange","event","target","value","name","newCI","console","log","controllerInterface","style","backgroundColor","padding","opacity","borderRadius","rotationY","htmlfor","type","onChange","min","max","useFrame","current","rotation","x","y","z","Fragment","ref","scale","onClick","args","width","selectStyle","margin","AudioAnalyser","allDevices","setAllDevices","init","switchInit","id","label","kind","audioCtx","window","AudioContext","webkitAudioContext","analyser","createAnalyser","fftsize","navigator","mediaDevices","getUserMedia","audio","video","then","stream","createMediaStreamSource","connect","enumerateDevices","devices","forEach","device","dev","deviceId","groupId","push","catch","err","message","length","Uint8Array","frequencyBinCount","map","App","useStore","state","allEffects","addEffect","height","pixelRatio","devicePixelRatio","invalidateFrameloop","left","top","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","create","set","get","selectedEffect","controllerInput","payload","eff","getCI","updateControllerInput","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.783bb349.chunk.js","sourcesContent":["import { useFrame } from '@react-three/fiber'\nimport React, { useState } from 'react'\nimport { useStore } from '../index'\nimport shallow from 'zustand/shallow'\nimport { Html } from '@react-three/drei/web/Html.cjs'\n\nexport default function Sphere(props) {\n    const mesh = React.useRef();\n    const [ active, toggleActive ] = useState(false)\n    let audioFactors = {\n        amp: 1,\n    }\n\n    let [ cI, setCI ] = useState({\n        size: props.size,\n        color: props.color,\n        heightSegments: props.heightSegments,\n        widthSegments: props.widthSegments,\n        posX: props.position[0],\n        posY: props.position[1],\n        posZ: props.position[2],\n        rotX: 0,\n        activeRot: true,\n        rotY: 0,\n        \n        rotZ: 0\n\n    })\n\n    const handleChange = (event) => {\n        const { value, name } = event.target;\n        let newCI = {...cI}\n        newCI[name] = value;\n        console.log(cI)\n        setCI(newCI)\n    }\n\n    const handleClick = () => {\n        toggleActive(!active)\n    }\n\n    const style = {\n        backgroundColor: 'grey',\n        padding: '0.6em',\n        opacity: '0.7',\n        borderRadius: '0.5em'\n    }\n\n    const controllerInterface = <Html style={style} position={[15, 40, -50]} rotationY={0.2}>\n                                    <div>\n                                        <form>\n\n                                            <label htmlfor='color'>Farbe</label>\n                                            <br/>\n                                            <input type='color' name='color' value={cI.color} onChange={handleChange}/>\n\n                                            <br/>\n\n                                            <label htmlfor='size'>Größe</label>\n                                            <input type='range' name='size' value={cI.size} onChange={handleChange}/>\n\n                                            <label htmlfor='heightSegments'>heightSegments</label>\n                                            <input type='range' min={1} max={20} name='heightSegments' value={cI.heightSegments} onChange={handleChange}/>\n\n                                            <label htmlfor='widthSegments'>widthSegments</label>\n                                            <input type='range' min={1} max={20} name='widthSegments' value={cI.widthSegments} onChange={handleChange}/> \n\n                                            <br/>\n\n                                            <label htmlfor='X'>X</label>\n                                            <input type='range' min={-8.8} max={8.8} name='posX' value={cI.posX} onChange={handleChange}/>\n                                            <label htmlfor='Y'>Y</label>\n                                            <input type='range' min={-10} max={10} name='posY' value={cI.posY} onChange={handleChange}/>\n                                            <label htmlfor='Z'>Z</label>\n                                            <input type='range' min={-10} max={10} name='posZ' value={cI.posZ} onChange={handleChange}/>\n\n                                            <br/>\n\n                                            <label htmlfor='rotX'>Rotation X</label>\n                                            <input type='range' min={-100} max={100} name='rotX' value={cI.rotX} onChange={handleChange}/>\n                                            <label htmlfor='rotY'>Rotation Y</label>\n                                            <input type='range' min={-100} max={100} name='rotY' value={cI.rotY} onChange={handleChange}/>\n                                            <label htmlfor='rotZ'>Rotation Z</label>\n                                            <input type='range' min={-100} max={100} name='rotZ' value={cI.rotZ} onChange={handleChange}/>\n                                        </form>\n                                    </div>\n                                </Html>\n\n    useFrame(() => {\n        if(cI.activeRot) {\n            mesh.current.rotation.x += cI.rotX/1000;\n            mesh.current.rotation.y += cI.rotY/1000;\n            mesh.current.rotation.z += cI.rotZ/1000;\n        }\n    })\n\n\n\n    return(\n        <React.Fragment>\n\n        {active ? controllerInterface : null}\n\n        <mesh\n            position={[cI.posX, cI.posY, cI.posZ]}\n            ref={mesh}\n            scale={cI.size/10}\n            onClick={handleClick}\n            \n            >\n            \n            <sphereGeometry args={[1, cI.heightSegments, cI.widthSegments]} />\n            <meshStandardMaterial color={cI.color} />\n          </mesh>\n          </React.Fragment >\n\n    )\n}","import { useFrame } from '@react-three/fiber';\nimport React, { useState } from 'react';\nimport { Html } from '@react-three/drei/web/Html.cjs'\nimport { useStore } from '../index';\n\nconst style = {\n  padding: '1em',\n  width: '100%',\n  backgroundColor: 'gray',\n  borderRadius: '0.5em'\n}\nconst selectStyle = {\n  padding: '0em 1em',\n  margin: '1em',\n  width: '100%'\n}\n\nexport default function AudioAnalyser() {\n  const [ allDevices, setAllDevices ] = useState([]);\n  const [ init, switchInit ] = useState(false)\n  let [ selectedInput, changeInput ] = useState({id: 'default', label: '', kind: 'audioinput'});\n\n  var audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n  var analyser = audioCtx.createAnalyser();\n  analyser.fftsize = 512;\n\n  let source;\n  \n  const onChange = (event) => {\n    const value = event.target.value;\n    changeInput(value);\n  }\n\n  //get Permission to read System inputs and outputs\n  navigator.mediaDevices.getUserMedia({audio: true, video: false})\n    .then(function(stream) {\n      window.stream = stream\n      source = audioCtx.createMediaStreamSource(stream)\n      source.connect(analyser)\n      console.log('hey')\n    })\n\n  //case privacy doesnt allow access\n  if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n    console.log(\"enumerateDevices() not supported.\");\n   \n  }\n  \n  //get all available devices\n  if(!init) {\n    navigator.mediaDevices.enumerateDevices()\n    .then(function(devices) {\n      let i = 0;\n        devices.forEach(function(device) {\n          let dev = {\n          kind: device.kind,\n          label: device.label,\n          id: device.deviceId,\n          groupId: device.groupId\n        }\n        allDevices.push(dev)\n        setAllDevices([...allDevices, dev])\n        i++;\n        //console.log(allDevices)\n      });\n    })\n    .catch(function(err) {\n      console.log(err.name + \": \" + err.message);\n    });\n    switchInit(true)\n  }\n  console.log(allDevices.length)\n  console.log(allDevices[0])\n\n  useFrame(() => {\n    var array = new Uint8Array(analyser.frequencyBinCount)\n    //console.log(analyser)\n  })\n\n  return (\n    <React.Fragment >\n            <Html position={[-6, 6,-3]} rotationY={0.2}>\n                  <form style={style}>\n                    <label htmlfor='type'>Audio-Quelle</label>\n                    <select name='type' style={selectStyle} >\n                      {allDevices.map(device => \n                        <option value={device.deviceId}>{device.label}</option>\n                      )}\n                    </select>\n                  </form>\n            </Html>   \n    </React.Fragment>\n  )  \n}","import { Canvas } from '@react-three/fiber'\nimport React from 'react'\nimport Box from './components/Box'\nimport ControllerInterface from './components/ControllerInterface';\nimport GeoContainer from './components/GeoContainer';\nimport { useStore } from './index'\nimport uniqid from 'uniqid'\nimport Sphere from './components/Sphere';\nimport AudioAnalyser from './components/AudioAnalyser';\n\n\nfunction App() {\n  const [ effects, addEffects ] = useStore(state => [state.allEffects, state.addEffect])\n  //addEffects(<B/>)\n \n\n  return (\n    <div style={{height: '1000px'}} >\n      <Canvas   pixelRatio={window.devicePixelRatio}\n                invalidateFrameloop={false}\n                style={{ position: 'absolute', left: '0', top: '0', width: '100%', height: '100%' }}>\n        <ambientLight />\n        <pointLight position={[10, 10, 10]} />\n\n            \n        <Sphere position={[-2, 0, -10]} color={'#0000fa'} size={50} />                              \n        <Sphere position={[2, -2, -10]} color={'#f30000'} size={50} heightSegments={20} widthSegments={20}/>                              \n\n        <AudioAnalyser />     \n      </Canvas>               \n    </div>\n\n  );\n}\n{/* <GeoContainer id={uniqid()}type={'box'} position={[0,0,-10]} color={'#ff00ff'} size={50}/>  */}\n\n{/* <Box position={[0,0,-10]} color={'#ff00ff'} size={50}/> */}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport create from 'zustand'\nimport Box from './components/Box';\n\nexport const useStore = create((set, get) => ({\n  selectedEffect: 0,\n  allEffects: {\n                } ,\n  controllerInput: {\n      type: 'Box',\n      size: 50,\n      color: '#ff00ff'\n      },\n  addEffect: (payload) => {\n    let eff = get().allEffects\n    eff[payload.id] = payload.controllerInput\n    set(state => (eff))\n  },\n  getCI: (id) => {\n    console.log(get(state => state.allEffects.allEffects))\n    return get(state => state);\n  },\n  updateControllerInput: (payload) => {\n    let allEff = get().allEffects;\n\n    allEff[payload.id] = payload.controllerInput;\n    set(state => ({allEffects: {...state.allEffects}}))\n  }\n\n})) \n\nReactDOM.render(\n          <App />,\n  document.getElementById('root')\n);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}