{"version":3,"sources":["state.js","components/Sphere.js","components/AudioAnalyser.js","components/Plane.js","App.js","reportWebVitals.js","index.js"],"names":["useStore","create","set","get","micAmp","updateMicAmp","amp","state","Sphere","props","mesh","React","useRef","useState","active","toggleActive","size","color","heightSegments","widthSegments","posX","position","posY","posZ","rotX","activeRot","rotY","rotZ","cI","setCI","handleChange","event","target","value","name","newCI","controllerInterface","style","backgroundColor","padding","opacity","borderRadius","rotationY","htmlfor","type","onChange","min","max","useFrame","ampRot","current","rotation","x","y","z","Fragment","ref","scale","onClick","args","MeshWobbleMaterial","attact","side","THREE","factor","speed","refractionRatio","roughness","wireframe","AudioAnalyser","allDevices","setAllDevices","init","switchInit","id","label","kind","window","AudioContext","webkitAudioContext","createAnalyser","fftsize","navigator","mediaDevices","getUserMedia","audio","video","then","stream","audioContext","analyser","microphone","createMediaStreamSource","scriptProcessor","createScriptProcessor","smoothingTimeConstant","fftSize","connect","destination","onaudioprocess","array","Uint8Array","frequencyBinCount","getByteFrequencyData","average","reduce","a","length","catch","err","console","error","enumerateDevices","log","devices","forEach","device","dev","deviceId","groupId","push","message","Plane","toggleWireframe","App","height","margin","pixelRatio","devicePixelRatio","invalidateFrameloop","left","top","width","attach","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.68f2c42a.chunk.js","sourcesContent":["import create from 'zustand'\n\nexport const useStore = create((set, get) => ({\n    micAmp: 25,\n    updateMicAmp: (amp) => {        \n        return set(state => ({micAmp: amp}))\n    } \n  \n  })) \n  ","import { useFrame } from '@react-three/fiber'\nimport React, { useState } from 'react'\nimport { useStore } from '../state'\nimport * as THREE from 'three'\nimport { MeshWobbleMaterial } from '@react-three/drei'\n\nimport shallow from 'zustand/shallow'\nimport { Html } from '@react-three/drei/web/Html.cjs'\n\nexport default function Sphere(props) {\n    const mesh = React.useRef();\n    const [ active, toggleActive ] = useState(false)\n    const [ amp ] = useStore(state => [ state.micAmp ])\n    let audioFactors = {\n        amp: 1,\n    }\n\n    let [ cI, setCI ] = useState({\n        size: props.size,\n        color: props.color,\n        heightSegments: props.heightSegments,\n        widthSegments: props.widthSegments,\n        posX: props.position[0],\n        posY: props.position[1],\n        posZ: props.position[2],\n        rotX: props.rotX,\n        activeRot: true,\n        rotY: props.rotY,\n        \n        rotZ: props.rotZ\n\n    })\n\n    const handleChange = (event) => {\n        const { value, name } = event.target;\n        let newCI = {...cI}\n        newCI[name] = value;\n        setCI(newCI)\n    }\n\n    const handleClick = () => {\n        toggleActive(!active)\n    }\n\n    const style = {\n        backgroundColor: 'grey',\n        padding: '0.6em',\n        opacity: '0.7',\n        borderRadius: '0.5em'\n    }\n\n    const controllerInterface = <Html style={style} position={[cI.posX-10, cI.posY+2, -50]} rotationY={0.2}>\n                                    <div>\n                                        <form>\n\n                                            <label htmlfor='color'>Farbe</label>\n                                            <br/>\n                                            <input type='color' name='color' value={cI.color} onChange={handleChange}/>\n\n                                            <br/>\n\n                                            <label htmlfor='size'>Größe</label>\n                                            <input type='range' name='size' value={cI.size} onChange={handleChange}/>\n\n                                            <label htmlfor='heightSegments'>heightSegments</label>\n                                            <input type='range' min={1} max={20} name='heightSegments' value={cI.heightSegments} onChange={handleChange}/>\n\n                                            <label htmlfor='widthSegments'>widthSegments</label>\n                                            <input type='range' min={1} max={20} name='widthSegments' value={cI.widthSegments} onChange={handleChange}/> \n\n                                            <br/>\n\n                                            <label htmlfor='X'>X</label>\n                                            <input type='range' min={-8.8} max={8.8} name='posX' value={cI.posX} onChange={handleChange}/>\n                                            <label htmlfor='Y'>Y</label>\n                                            <input type='range' min={-10} max={10} name='posY' value={cI.posY} onChange={handleChange}/>\n                                            <label htmlfor='Z'>Z</label>\n                                            <input type='range' min={-10} max={10} name='posZ' value={cI.posZ} onChange={handleChange}/>\n\n                                            <br/>\n\n                                            <label htmlfor='rotX'>Rotation X</label>\n                                            <input type='range' min={-100} max={100} name='rotX' value={cI.rotX} onChange={handleChange}/>\n                                            <label htmlfor='rotY'>Rotation Y</label>\n                                            <input type='range' min={-100} max={100} name='rotY' value={cI.rotY} onChange={handleChange}/>\n                                            <label htmlfor='rotZ'>Rotation Z</label>\n                                            <input type='range' min={-100} max={100} name='rotZ' value={cI.rotZ} onChange={handleChange}/>\n                                        </form>\n                                    </div>\n                                </Html>\n\n    useFrame(() => {\n        \n\n        if(cI.activeRot) {\n\n            var ampRot = amp/30;\n            mesh.current.rotation.x += (cI.rotX/1000) * ampRot;\n            mesh.current.rotation.y += (cI.rotY/1000) * ampRot;\n            mesh.current.rotation.z += (cI.rotZ/1000) * ampRot;\n        }\n    })\n\n\n\n    return(\n        <React.Fragment>\n\n        {active ? controllerInterface : null}\n\n        <mesh\n            position={[cI.posX, cI.posY, cI.posZ]}\n            ref={mesh}\n            scale={cI.size/10+amp/40}\n            onClick={handleClick}\n            \n            >\n            \n            <sphereGeometry args={[1, cI.heightSegments+amp*20, cI.widthSegments]} />\n            \n            <MeshWobbleMaterial \n                attact='material'\n                color={cI.color}\n                side={THREE.DoubleSide}\n                factor={1*(amp)}\n                speed={0.1*(0.01/amp)}\n                refractionRatio={3}\n                roughness={0.2}\n                wireframe={false}\n                />\n          </mesh>\n          </React.Fragment >\n\n    )\n}","import { useFrame } from '@react-three/fiber';\nimport React, { useState } from 'react';\nimport { Html } from '@react-three/drei/web/Html.cjs'\nimport { useStore } from '../state';\n\nconst style = {\n  padding: '1em',\n  width: '100%',\n  backgroundColor: 'gray',\n  borderRadius: '0.5em'\n}\nconst selectStyle = {\n  padding: '0em 1em',\n  margin: '1em',\n  width: '100%'\n}\n\nexport default function AudioAnalyser() {\n  const [ allDevices, setAllDevices ] = useState([]);\n  const [ init, switchInit ] = useState(false)\n  let [ selectedInput, changeInput ] = useState({id: 'default', label: '', kind: 'audioinput'});\n  const [amp, updateMicAmp] = useStore(state => [ state.micAmp, state.updateMicAmp ])\n\n  var audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n  var analyser = audioCtx.createAnalyser();\n  analyser.fftsize = 512;\n\n  let source;\n  \n  const onChange = (event) => {\n    const value = event.target.value;\n    changeInput(value);\n  }\n\n  //get Permission to read System inputs and outputs\n  navigator.mediaDevices.getUserMedia({\n    audio: true,\n    video: true\n  })\n    .then(function(stream) {\n      const audioContext = new AudioContext();\n      const analyser = audioContext.createAnalyser();\n      const microphone = audioContext.createMediaStreamSource(stream);\n      const scriptProcessor = audioContext.createScriptProcessor(2048, 1, 1);\n  \n      analyser.smoothingTimeConstant = 0.8;\n      analyser.fftSize = 1024;\n  \n      microphone.connect(analyser);\n      analyser.connect(scriptProcessor);\n      scriptProcessor.connect(audioContext.destination);\n      scriptProcessor.onaudioprocess = function() {\n        const array = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(array);\n        const arraySum = array.reduce((a, value) => a + value, 0);\n        const average = arraySum / array.length;\n        updateMicAmp(average)\n      };\n    })\n    .catch(function(err) {\n      /* handle the error */\n      console.error(err);\n    });\n  //case privacy doesnt allow access\n  if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n    console.log(\"enumerateDevices() not supported.\");\n   \n  }\n  \n  //get all available devices\n  if(!init) {\n    navigator.mediaDevices.enumerateDevices()\n    .then(function(devices) {\n      let i = 0;\n        devices.forEach(function(device) {\n          let dev = {\n          kind: device.kind,\n          label: device.label,\n          id: device.deviceId,\n          groupId: device.groupId\n        }\n        allDevices.push(dev)\n        setAllDevices([...allDevices, dev])\n        i++;\n        //console.log(allDevices)\n      });\n    })\n    .catch(function(err) {\n      console.log(err.name + \": \" + err.message);\n    });\n    switchInit(true)\n  }\n\n  return (\n    <React.Fragment >\n           \n    </React.Fragment>\n  )  \n}\n{/* <Html position={[-6, 6,-3]} rotationY={0.2}>\n<form style={style}>\n  <label htmlfor='type'>Audio-Quelle</label>\n  <select name='type' style={selectStyle} >\n    {allDevices.map(device => \n      <option value={device.deviceId}>{device.label}</option>\n    )}\n  </select>\n</form>\n</Html>    */}","import { useFrame } from '@react-three/fiber'\nimport * as THREE from 'three'\nimport React, { useState } from 'react'\nimport { MeshWobbleMaterial } from '@react-three/drei'\nimport { useStore } from '../state'\nimport shallow from 'zustand/shallow'\nimport { Html } from '@react-three/drei/web/Html.cjs'\n\nexport default function Plane(props) {\n    const mesh = React.useRef();\n    const [ active, toggleActive ] = useState(false)\n    const [ wireframe, toggleWireframe ] = useState(false)\n    const [ amp ] = useStore(state => [ state.micAmp ])\n\n    let [ cI, setCI ] = useState({\n        size: props.size,\n        color: props.color,\n        heightSegments: props.heightSegments,\n        widthSegments: props.widthSegments,\n        posX: props.position[0],\n        posY: props.position[1],\n        posZ: props.position[2],\n        rotX: props.rotX,\n        activeRot: true,\n        rotY: props.rotY,\n        \n        rotZ: props.rotZ\n\n    })\n\n    const handleChange = (event) => {\n        const { value, name } = event.target;\n        let newCI = {...cI}\n        newCI[name] = value;\n        setCI(newCI)\n    }\n\n    const handleClick = () => {\n        toggleActive(!active)\n    }\n\n    const handleWireframe = () => {\n        toggleWireframe(!wireframe)\n    }\n\n    const style = {\n        backgroundColor: 'grey',\n        padding: '0.6em',\n        opacity: '0.7',\n        borderRadius: '0.5em'\n    }\n\n    const controllerInterface = <Html style={style} position={[50, 40, -50]} rotationY={0.2}>\n                                    <div>\n                                        <form>\n\n                                            <label htmlfor='color'>Farbe</label>\n                                            <br/>\n                                            <input type='color' name='color' value={cI.color} onChange={handleChange}/>\n\n                                            <br/>\n                                            \n                                            <label htmlfor='size'>Wireframe On</label>\n                                            <input type='checkbox' onChange={handleWireframe}/>\n   \n\n                                            <label htmlfor='size'>Größe</label>\n                                            <input type='range' name='size' value={cI.size} onChange={handleChange}/>\n\n                                            <label htmlfor='heightSegments'>heightSegments</label>\n                                            <input type='range' min={1} max={200} name='heightSegments' value={cI.heightSegments} onChange={handleChange}/>\n\n                                            <label htmlfor='widthSegments'>widthSegments</label>\n                                            <input type='range' min={1} max={200} name='widthSegments' value={cI.widthSegments} onChange={handleChange}/> \n\n                                            <br/>\n\n                                            <label htmlfor='X'>X</label>\n                                            <input type='range' min={-8.8} max={8.8} name='posX' value={cI.posX} onChange={handleChange}/>\n                                            <label htmlfor='Y'>Y</label>\n                                            <input type='range' min={-10} max={10} name='posY' value={cI.posY} onChange={handleChange}/>\n                                            <label htmlfor='Z'>Z</label>\n                                            <input type='range' min={-10} max={10} name='posZ' value={cI.posZ} onChange={handleChange}/>\n\n                                            <br/>\n\n                                            <label htmlfor='rotX'>Rotation X</label>\n                                            <input type='range' min={-360} max={360} name='rotX' value={cI.rotX} onChange={handleChange}/>\n                                            <label htmlfor='rotY'>Rotation Y</label>\n                                            <input type='range' min={-360} max={360} name='rotY' value={cI.rotY} onChange={handleChange}/>\n                                            <label htmlfor='rotZ'>Rotation Z</label>\n                                            <input type='range' min={-360} max={360} name='rotZ' value={cI.rotZ} onChange={handleChange}/>\n                                        </form>\n                                    </div>\n                                </Html>\n\n\n    return(\n        <React.Fragment>\n\n        {active ? controllerInterface : null}\n\n        <mesh\n            position={[cI.posX, cI.posY, cI.posZ]}\n            ref={mesh}\n            scale={cI.size/10}\n            onClick={handleClick}\n            rotation={[cI.rotX/100, cI.rotY/100, cI.rotZ/100]}\n            >\n            \n            <planeGeometry \n                args={[1000, 1000, cI.heightSegments, cI.widthSegments]} \n                />\n            <MeshWobbleMaterial \n                attact='material'\n                color={cI.color}\n                side={THREE.DoubleSide}\n                factor={0.41}\n                speed={1}\n                refractionRatio={3}\n                roughness={0.2}\n                wireframe={wireframe}\n                />\n\n          </mesh>\n          </React.Fragment >\n\n    )\n}","import { Canvas } from '@react-three/fiber'\nimport React from 'react'\nimport Box from './components/Box'\nimport ControllerInterface from './components/ControllerInterface';\nimport GeoContainer from './components/GeoContainer';\nimport uniqid from 'uniqid'\nimport Sphere from './components/Sphere';\nimport AudioAnalyser from './components/AudioAnalyser';\nimport Plane from './components/Plane';\n\n\nfunction App() {\n \n\n  return (\n    <div style={{height: '1000px', margin: '-200px', height: '2000em', backgroundColor:'black'}} >\n      <Canvas   pixelRatio={window.devicePixelRatio}\n                invalidateFrameloop={false}\n                style={{ position: 'absolute', left: '0', top: '0', width: '100%', height: '100%' }}>\n        <ambientLight />\n        <fog attach=\"fog\" args={[\"lightgrey\", 5, 30]} />\n\n        <pointLight position={[10, 10, 10]} />\n\n            \n        <Sphere position={[0, 0, -4]} color={'#ECB365'} size={10} heightSegments={1} rotX={-28} rotY={-12} rotZ={-10}/>                              \n        <Plane position={[-2.8, -10, -1]} color={\"#041C32\"} size={1} heightSegments={50} widthSegments={50} rotX={-65} rotY={-1} rotZ={2}/>                              \n\n        <AudioAnalyser />     \n      </Canvas>              \n    </div>\n\n  );\n}\n{/* <GeoContainer id={uniqid()}type={'box'} position={[0,0,-10]} color={'#ff00ff'} size={50}/>  */}\n{/* <Sphere position={[-2.8, -10, -1]} color={\"#a3bd47\"} size={99} heightSegments={20} widthSegments={2} rotX={-2} rotY={-1} rotZ={2}/>                               */}\n{/* <Sphere position={[6, -2, -10]} color={'#DE834D'} size={50} heightSegments={20} widthSegments={2} rotX={8} rotY={10} rotZ={-10}/>                               */}\n\n{/* <Box position={[0,0,-10]} color={'#ff00ff'} size={50}/> */}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport create from 'zustand'\nimport Box from './components/Box';\n\n// export const useStore = create((set, get) => ({\n//   selectedEffect: 0,\n//   allEffects: {\n//                 } ,\n//   controllerInput: {\n//       type: 'Box',\n//       size: 50,\n//       color: '#ff00ff'\n//       },\n//   addEffect: (payload) => {\n//     let eff = get().allEffects\n//     eff[payload.id] = payload.controllerInput\n//     set(state => (eff))\n//   },\n//   getCI: (id) => {\n//     console.log(get(state => state.allEffects.allEffects))\n//     return get(state => state);\n//   },\n//   updateControllerInput: (payload) => {\n//     let allEff = get().allEffects;\n\n//     allEff[payload.id] = payload.controllerInput;\n//     set(state => ({allEffects: {...state.allEffects}}))\n//   }\n\n// })) \n\nReactDOM.render(\n          <App />,\n  document.getElementById('root')\n);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}