{"version":3,"sources":["state.js","components/Sphere.js","components/AudioAnalyser.js","components/Plane.js","components/GeoContainer.js","App.js","reportWebVitals.js","index.js"],"names":["useStore","create","set","get","micAmp","updateMicAmp","amp","state","Sphere","props","mesh","React","useRef","useState","active","toggleActive","size","color","heightSegments","widthSegments","posX","position","posY","posZ","rotX","rotY","rotZ","cI","setCI","handleChange","event","target","value","name","newCI","controllerInterface","style","backgroundColor","padding","opacity","borderRadius","rotationY","htmlfor","type","onChange","min","max","useFrame","ampRot","current","rotation","x","y","z","Fragment","ref","scale","onClick","args","MeshWobbleMaterial","attact","side","THREE","factor","speed","refractionRatio","roughness","wireframe","AudioAnalyser","id","label","kind","window","AudioContext","webkitAudioContext","createAnalyser","fftsize","navigator","mediaDevices","getUserMedia","audio","video","then","stream","audioContext","analyser","microphone","createMediaStreamSource","scriptProcessor","createScriptProcessor","smoothingTimeConstant","fftSize","connect","destination","onaudioprocess","array","Uint8Array","frequencyBinCount","getByteFrequencyData","average","reduce","a","length","catch","err","console","error","enumerateDevices","log","Plane","toggleWireframe","font","GeoContainer","geometries","updateGeometry","newName","updateNewName","visible","toggleVisibility","removeGeometry","index","closest","getAttribute","splice","handleToggle","inVisible","Visible","preventDefault","newGeo","selectedIndex","document","getElementById","newArray","push","map","geo","getGeoLI","App","height","margin","pixelRatio","devicePixelRatio","invalidateFrameloop","left","top","width","attach","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.ee37b1cb.chunk.js","sourcesContent":["import create from 'zustand'\n\nexport const useStore = create((set, get) => ({\n    micAmp: 25,\n    updateMicAmp: (amp) => {        \n        return set(state => ({micAmp: amp}))\n    } \n  \n  })) \n  ","import { useFrame } from '@react-three/fiber'\nimport React, { useState } from 'react'\nimport { useStore } from '../state'\nimport * as THREE from 'three'\nimport { MeshWobbleMaterial } from '@react-three/drei'\n\nimport { Html } from '@react-three/drei/web/Html.cjs'\n\n/**\n * A Sphere Three.js Object, whose parameters are influences by the audio-input from the clients microphone\n * @param {object} param: The paramateters with which the 3d-Object is created. It includes:\n *  position: as an Array(3),\n *  color: as a HEX-value,\n *  size: as an Integer,\n *  heightSegments: the amount of heightSegments of the 3d-Object\n *  widthSegments: the amount of widthSegments of the 3d-Object\n *  rotX: the amount of static rotation on the x-axis\n *  rotY: the amount of static rotation on the y-axis\n *  rotZ: the amount of static rotation on the z-axis  \n * @return The react-three-fiber Sphere-Component\n**/ \nexport default function Sphere(props) {\n    const mesh = React.useRef();\n    //Visibility of ControllerInterface\n    const [ active, toggleActive ] = useState(false)\n    //Amplitude of microphone input connected to global store\n    const [ amp ] = useStore(state => [ state.micAmp ])\n\n    //locally stored controller variables\n    let [ cI, setCI ] = useState({\n        size: props.size,\n        color: props.color,\n        heightSegments: props.heightSegments,\n        widthSegments: props.widthSegments,\n        posX: props.position[0],\n        posY: props.position[1],\n        posZ: props.position[2],\n        rotX: props.rotX,\n        rotY: props.rotY,\n        rotZ: props.rotZ\n    })\n\n    //update values in controllerInput\n    const handleChange = (event) => {\n        const { value, name } = event.target;\n        let newCI = {...cI}\n        newCI[name] = value;\n        setCI(newCI)\n    }\n\n    const handleClick = () => {\n        toggleActive(!active)\n    }\n\n    const style = {\n        backgroundColor: 'grey',\n        padding: '0.6em',\n        opacity: '0.7',\n        borderRadius: '0.5em'\n    }\n\n    const controllerInterface = <Html style={style} position={[cI.posX-10, cI.posY+2, -50]} rotationY={0.2}>\n                                    <div>\n                                        <form>\n\n                                            <label htmlfor='color'>Farbe</label>\n                                            <br/>\n                                            <input type='color' name='color' value={cI.color} onChange={handleChange}/>\n\n                                            <br/>\n\n                                            <label htmlfor='size'>Größe</label>\n                                            <input type='range' name='size' value={cI.size} onChange={handleChange}/>\n\n                                            <label htmlfor='heightSegments'>heightSegments</label>\n                                            <input type='range' min={1} max={20} name='heightSegments' value={cI.heightSegments} onChange={handleChange}/>\n\n                                            <label htmlfor='widthSegments'>widthSegments</label>\n                                            <input type='range' min={1} max={20} name='widthSegments' value={cI.widthSegments} onChange={handleChange}/> \n\n                                            <br/>\n\n                                            <label htmlfor='X'>X</label>\n                                            <input type='range' min={-8.8} max={8.8} name='posX' value={cI.posX} onChange={handleChange}/>\n                                            <label htmlfor='Y'>Y</label>\n                                            <input type='range' min={-10} max={10} name='posY' value={cI.posY} onChange={handleChange}/>\n                                            <label htmlfor='Z'>Z</label>\n                                            <input type='range' min={-10} max={10} name='posZ' value={cI.posZ} onChange={handleChange}/>\n\n                                            <br/>\n\n                                            <label htmlfor='rotX'>Rotation X</label>\n                                            <input type='range' min={-100} max={100} name='rotX' value={cI.rotX} onChange={handleChange}/>\n                                            <label htmlfor='rotY'>Rotation Y</label>\n                                            <input type='range' min={-100} max={100} name='rotY' value={cI.rotY} onChange={handleChange}/>\n                                            <label htmlfor='rotZ'>Rotation Z</label>\n                                            <input type='range' min={-100} max={100} name='rotZ' value={cI.rotZ} onChange={handleChange}/>\n                                        </form>\n                                    </div>\n                                </Html>\n\n    //apply rotation on every frame\n    useFrame(() => {\n            var ampRot = amp/50;\n            mesh.current.rotation.x += (cI.rotX/1000) * ampRot;\n            mesh.current.rotation.y += (cI.rotY/1000) * ampRot;\n            mesh.current.rotation.z += (cI.rotZ/1000) * ampRot;\n    })\n\n\n\n    return(\n        <React.Fragment>\n\n        {active ? controllerInterface : null}\n\n        <mesh\n            position={[cI.posX, cI.posY, cI.posZ]}\n            ref={mesh}\n            scale={cI.size/10+amp/40}\n            onClick={handleClick}\n            \n            >\n            \n            <sphereGeometry args={[1, cI.heightSegments+amp*20, cI.widthSegments*(amp/35)]} />\n            \n            <MeshWobbleMaterial \n                attact='material'\n                color={cI.color}\n                side={THREE.DoubleSide}\n                factor={1*(amp)}\n                speed={0.2*(0.01/amp)}\n                refractionRatio={3}\n                roughness={0.2}\n                wireframe={false}\n                />\n          </mesh>\n          </React.Fragment >\n\n    )\n}","import { useFrame } from '@react-three/fiber';\nimport React, { useState } from 'react';\nimport { Html } from '@react-three/drei/web/Html.cjs'\nimport { useStore } from '../state';\n\nconst style = {\n  padding: '1em',\n  width: '100%',\n  backgroundColor: 'gray',\n  borderRadius: '0.5em'\n}\nconst selectStyle = {\n  padding: '0em 1em',\n  margin: '1em',\n  width: '100%'\n}\n\nexport default function AudioAnalyser() {\n  const [ allDevices, setAllDevices ] = useState([]);\n  const [ init, switchInit ] = useState(false)\n  let [ selectedInput, changeInput ] = useState({id: 'default', label: '', kind: 'audioinput'});\n  const [amp, updateMicAmp] = useStore(state => [ state.micAmp, state.updateMicAmp ])\n\n  var audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n  var analyser = audioCtx.createAnalyser();\n  analyser.fftsize = 512;\n\n  let source;\n  \n  const onChange = (event) => {\n    const value = event.target.value;\n    changeInput(value);\n  }\n\n  //get Permission to read System inputs and outputs\n  navigator.mediaDevices.getUserMedia({\n    audio: true,\n    video: true\n  })\n    .then(function(stream) {\n      const audioContext = new AudioContext();\n      const analyser = audioContext.createAnalyser();\n      const microphone = audioContext.createMediaStreamSource(stream);\n      const scriptProcessor = audioContext.createScriptProcessor(2048, 1, 1);\n  \n      analyser.smoothingTimeConstant = 0.9;\n      analyser.fftSize = 128;\n  \n      microphone.connect(analyser);\n      analyser.connect(scriptProcessor);\n      scriptProcessor.connect(audioContext.destination);\n      scriptProcessor.onaudioprocess = function() {\n        const array = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(array);\n        const arraySum = array.reduce((a, value) => a + value, 0);\n        const average = arraySum / array.length;\n        updateMicAmp(average)\n      };\n    })\n    .catch(function(err) {\n      /* handle the error */\n      console.error(err);\n    });\n  //case privacy doesnt allow access\n  if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n    console.log(\"enumerateDevices() not supported.\");\n   \n  }\n  \n  \n  return (\n    <React.Fragment >\n           \n    </React.Fragment>\n  )  \n}\n{/* <Html position={[-6, 6,-3]} rotationY={0.2}>\n<form style={style}>\n  <label htmlfor='type'>Audio-Quelle</label>\n  <select name='type' style={selectStyle} >\n    {allDevices.map(device => \n      <option value={device.deviceId}>{device.label}</option>\n    )}\n  </select>\n</form>\n</Html>    */}","import * as THREE from 'three'\nimport React, { useState } from 'react'\nimport { MeshWobbleMaterial } from '@react-three/drei'\nimport { useStore } from '../state'\nimport shallow from 'zustand/shallow'\nimport { Html } from '@react-three/drei/web/Html.cjs'\n\n/**\n * A Plane Three.js Object, whose parameters are influences by the audio-input from the clients microphone\n * @param {object} param: The paramateters with which the 3d-Object is created. It includes:\n *  position: as an Array(3),\n *  color: as a HEX-value,\n *  size: as an Integer,\n *  heightSegments: the amount of heightSegments of the 3d-Object\n *  widthSegments: the amount of widthSegments of the 3d-Object\n *  rotX: the amount of static rotation on the x-axis\n *  rotY: the amount of static rotation on the y-axis\n *  rotZ: the amount of static rotation on the z-axis  \n * @return The react-three-fiber Plane-Component\n**/ \nexport default function Plane(props) {\n    const mesh = React.useRef();\n    //Visibility of ControllerInterface\n    const [ active, toggleActive ] = useState(false)\n    //Visibility of wireframe\n    const [ wireframe, toggleWireframe ] = useState(false)\n    //Amplitude of microphone input connected to global store\n    const [ amp ] = useStore(state => [ state.micAmp ])\n\n    //locally stored controller variables\n    let [ cI, setCI ] = useState({\n        size: props.size,\n        color: props.color,\n        heightSegments: props.heightSegments,\n        widthSegments: props.widthSegments,\n        posX: props.position[0],\n        posY: props.position[1],\n        posZ: props.position[2],\n        rotX: props.rotX,\n        rotY: props.rotY,\n        rotZ: props.rotZ\n    })\n\n    const handleChange = (event) => {\n        const { value, name } = event.target;\n        let newCI = {...cI}\n        newCI[name] = value;\n        setCI(newCI)\n    }\n\n    const handleClick = () => {\n        toggleActive(!active)\n    }\n\n    const handleWireframe = () => {\n        toggleWireframe(!wireframe)\n    }\n\n    const style = {\n        backgroundColor: 'grey',\n        padding: '0.6em',\n        opacity: '0.7',\n        borderRadius: '0.5em'\n    }\n\n    const controllerInterface = <Html style={style} position={[50, 40, -50]} rotationY={0.2}>\n                                    <div>\n                                        <form>\n\n                                            <label htmlfor='color'>Farbe</label>\n                                            <br/>\n                                            <input type='color' name='color' value={cI.color} onChange={handleChange}/>\n\n                                            <br/>\n                                            \n                                            <label htmlfor='wireframe'>Wireframe On</label>\n                                            <input type='checkbox' onChange={handleWireframe}/>\n   \n\n                                            <label htmlfor='size'>Größe</label>\n                                            <input type='range' name='size' min={-10} max={10}value={cI.size} onChange={handleChange}/>\n\n                                            <label htmlfor='heightSegments'>heightSegments</label>\n                                            <input type='range' min={1} max={200} name='heightSegments' value={cI.heightSegments} onChange={handleChange}/>\n\n                                            <label htmlfor='widthSegments'>widthSegments</label>\n                                            <input type='range' min={1} max={200} name='widthSegments' value={cI.widthSegments} onChange={handleChange}/> \n\n                                            <br/>\n\n                                            <label htmlfor='X'>X</label>\n                                            <input type='range' min={-8.8} max={8.8} name='posX' value={cI.posX} onChange={handleChange}/>\n                                            <label htmlfor='Y'>Y</label>\n                                            <input type='range' min={-20} max={10} name='posY' value={cI.posY} onChange={handleChange}/>\n                                            <label htmlfor='Z'>Z</label>\n                                            <input type='range' min={-10} max={10} name='posZ' value={cI.posZ} onChange={handleChange}/>\n\n                                            <br/>\n\n                                            <label htmlfor='rotX'>Rotation X</label>\n                                            <input type='range' min={-360} max={360} name='rotX' value={cI.rotX} onChange={handleChange}/>\n                                            <label htmlfor='rotY'>Rotation Y</label>\n                                            <input type='range' min={-360} max={360} name='rotY' value={cI.rotY} onChange={handleChange}/>\n                                            <label htmlfor='rotZ'>Rotation Z</label>\n                                            <input type='range' min={-360} max={360} name='rotZ' value={cI.rotZ} onChange={handleChange}/>\n                                        </form>\n                                    </div>\n                                </Html>\n\n\n    return(\n        <React.Fragment>\n\n        {active ? controllerInterface : null}\n\n        <mesh\n            position={[cI.posX, cI.posY, cI.posZ]}\n            ref={mesh}\n            scale={cI.size/10}\n            onClick={handleClick}\n            rotation={[cI.rotX/100, cI.rotY/100, cI.rotZ/100]}\n            >\n            \n            <planeGeometry \n                args={[1000, 1000, cI.heightSegments, cI.widthSegments]} \n                />\n            <MeshWobbleMaterial \n                attact='material'\n                color={cI.color}\n                side={THREE.DoubleSide}\n                factor={0.41}\n                speed={1}\n                refractionRatio={3}\n                roughness={0.2}\n                wireframe={wireframe}\n                />\n\n          </mesh>\n          </React.Fragment >\n\n    )\n}","import React, { useState } from 'react';\nimport Sphere from './Sphere';\nimport Plane from './Plane';\nimport { Html } from '@react-three/drei/web/Html.cjs'\n\nconst style = {\n    backgroundColor: 'grey',\n    padding: '0.6em',\n    opacity: '0.7',\n    borderRadius: '0.5em',\n    font: 'Arial'\n}\n\n\nexport default function GeoContainer() {\n    //An array containing all the geometries being rendered on screen\n    const [ geometries, updateGeometry ] = useState([\n        <Sphere type={'Sphere'} name={'Sphere1'} position={[0, 0, -4]} color={'#ECB365'} size={10} heightSegments={2} widthSegments={10} rotX={-28} rotY={-12} rotZ={-10}/>,\n        <Plane type={'Plane'} name={'Background'} position={[-2.8, -10, -1]} color={\"#041C32\"} size={1} heightSegments={50} widthSegments={50} rotX={-65} rotY={-1} rotZ={2}/>                              \n    ])\n\n    //Name of new Geometry\n    const [ newName, updateNewName ] = useState('');\n\n    //Toggle visibility\n    const [ visible, toggleVisibility ] = useState('true')\n\n    //Build Display of geometry\n    const getGeoLI = ( name, index ) => {\n        return <li index={index} >\n                {name}\n                <button onClick={removeGeometry}>remove</button>\n            </li>\n    }\n\n    //Add a geometry to the scene\n    const addGeometry = ( event ) => {\n        event.preventDefault();\n        var select = document.getElementById(\"selectType\")\n        var selectedIndex = select.selectedIndex;\n        var newArray = geometries;\n        var newGeo;\n        switch (selectedIndex) {\n        case 0:\n            newGeo = <Sphere type={'Sphere'} name={newName} position={[0, 0, -2]} color={'green'} size={10} heightSegments={2} widthSegments={10} rotX={-28} rotY={-12} rotZ={-10}/>\n            \n            newArray.push(newGeo)\n            updateGeometry([...geometries])\n            break;\n        case 1:\n            newGeo = <Plane type={'Plane'} name={newName} position={[-2.8, -10, -1]} color={\"red\"} size={1} heightSegments={50} widthSegments={50} rotX={-65} rotY={-1} rotZ={2}/>\n            \n            geometries.push(newGeo)\n            updateGeometry([...geometries])\n            break;\n        default:\n            console.log('a geometry-type needs to be selected')\n        \n        }\n    }\n\n    //remove a geometry from the scene\n    const removeGeometry = ( event ) => {\n        const index = event.target.closest('li').getAttribute('index')\n        geometries.splice(index, 1)\n        console.log(geometries)\n\n        updateGeometry([...geometries])\n    }\n\n    //Handle Change in input field, to differentiate between new geos in list\n    const handleChange = ( event ) => {\n        const  value  = event.target.value\n\n        updateNewName(value)\n    }\n\n    const handleToggle = () => {\n        toggleVisibility(!visible);\n    }\n\n    //hidden version of the interface\n    const inVisible = <button onClick={handleToggle}>Show</button>\n    //visible version of the interface\n    const Visible = <>\n                        <button onClick={handleToggle}>Hide</button>\n                        <h1>All Geometries</h1>\n                        <form>\n                            <h2 >Typ:</h2>\n                            <select id={\"selectType\"}>\n                                <option value={'sphere'}>Sphere</option>\n                                <option value={'plane'}>Plane</option>\n                            </select>\n                            <input type={'text'} value={newName} onChange={handleChange} />\n                            <button onClick={addGeometry}> Add Geometry</button>\n                        </form>\n                        <ul>\n                            {geometries.map(( geo, index ) => getGeoLI(geo.props.name, index))}   \n                        </ul>\n                    </>\n    \n    return (\n        <React.Fragment>\n\n        <Html style={style} position={[-10.7, 6, -3]}>\n           { visible ? Visible : inVisible } \n        </Html>\n        {geometries.map(geo => geo)}\n        </React.Fragment>\n    )\n}","import { Canvas } from '@react-three/fiber'\nimport React from 'react'\nimport Sphere from './components/Sphere';\nimport AudioAnalyser from './components/AudioAnalyser';\nimport Plane from './components/Plane';\nimport GeoContainer from './components/GeoContainer';\n\n\nfunction App() {\n \n\n  return (\n    <div style={{height: '1000px', margin: '-200px', height: '2000em', backgroundColor:'black'}} >\n      <Canvas   pixelRatio={window.devicePixelRatio}\n                invalidateFrameloop={false}\n                style={{ position: 'absolute', left: '0', top: '0', width: '100%', height: '100%' }}>\n        <ambientLight />\n        <fog attach=\"fog\" args={[\"lightgrey\", 5, 40]} />\n\n        <pointLight position={[10, 10, 10]} />\n\n         <GeoContainer />   \n\n        <AudioAnalyser />     \n      </Canvas>              \n    </div>\n\n  );\n}\n\n{/* <Sphere position={[0, 0, -4]} color={'#ECB365'} size={10} heightSegments={2} widthSegments={10} rotX={-28} rotY={-12} rotZ={-10}/>                              \n<Plane position={[-2.8, -10, -1]} color={\"#041C32\"} size={1} heightSegments={50} widthSegments={50} rotX={-65} rotY={-1} rotZ={2}/>                               */}\n\n\n{/* <GeoContainer id={uniqid()}type={'box'} position={[0,0,-10]} color={'#ff00ff'} size={50}/>  */}\n{/* <Sphere position={[-2.8, -10, -1]} color={\"#a3bd47\"} size={99} heightSegments={20} widthSegments={2} rotX={-2} rotY={-1} rotZ={2}/>                               */}\n{/* <Sphere position={[6, -2, -10]} color={'#DE834D'} size={50} heightSegments={20} widthSegments={2} rotX={8} rotY={10} rotZ={-10}/>                               */}\n\n{/* <Box position={[0,0,-10]} color={'#ff00ff'} size={50}/> */}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n          <App />,\n  document.getElementById('root')\n);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}