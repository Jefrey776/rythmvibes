{"version":3,"sources":["state.js","components/AudioAnalyser.js","components/Sphere.js","components/Plane.js","components/img/topfont.png","components/GeoContainer.js","App.js","reportWebVitals.js","index.js"],"names":["useStore","create","set","micAmp","updateMicAmp","amp","state","planeActiveSwitch","AudioAnalyser","navigator","mediaDevices","enumerateDevices","console","log","useEffect","getUserMedia","audio","video","then","stream","audioContext","AudioContext","analyser","createAnalyser","microphone","createMediaStreamSource","scriptProcessor","createScriptProcessor","smoothingTimeConstant","fftSize","connect","destination","onaudioprocess","array","Uint8Array","frequencyBinCount","getByteFrequencyData","average","reduce","a","value","length","catch","err","error","Fragment","Sphere","props","mesh","React","useRef","useState","active","toggleActive","activeRotation","toggleActiveRotation","THREE","mousePos","setMousePos","size","color","sensitivity","heightSegments","widthSegments","posX","position","posY","posZ","rotX","rotY","rotZ","cI","setCI","handleChange","event","target","name","newCI","handleToggle","undefined","tagName","toLowerCase","preventDefault","point","m","y","getMouseWorld","controllerInterface","className","x","z","rotationY","class","style","backgroundColor","padding","opacity","borderRadius","marginBottom","onClick","htmlfor","type","onChange","min","max","useFrame","ampRot","current","rotation","ref","scale","args","MeshWobbleMaterial","attact","side","factor","speed","refractionRatio","roughness","wireframe","Plane","reacts","wobble","toggleWobble","toggleWireframe","font","GeoContainer","geometries","updateGeometry","fogColor","setFogColor","fogOn","setFogOn","newName","updateNewName","visible","toggleVisibility","removeGeometry","index","closest","getAttribute","splice","inVisible","Visible","src","topfont","checked","id","newGeo","selectedIndex","document","getElementById","newArray","push","map","geo","getGeoLI","width","attach","App","height","margin","pixelRatio","window","devicePixelRatio","invalidateFrameloop","left","top","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.1454e621.chunk.js","sourcesContent":["import create from 'zustand'\n\n/**\n * pmndrs state management component. Used to handle changes in the users mic-input and inform the geometries. \n */\nexport const useStore = create(( set ) => ({\n    micAmp: 25,\n    updateMicAmp: (amp) => {        \n        return set(state => ({micAmp: amp}))\n    }, \n    planeActiveSwitch: true\n  })) \n  ","import React, { useEffect } from 'react';\nimport { useStore } from '../state';\n\n\nexport default function AudioAnalyser() {\n  const [updateMicAmp] = useStore(state => [ state.updateMicAmp ])\n\n  //case privacy doesnt allow access\n  if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n    console.log(\"enumerateDevices() not supported.\");   \n  }\n  \n  useEffect(() => {\n    //get Permission to read System inputs and outputs and add eventlistener to process input stream\n    navigator.mediaDevices.getUserMedia({\n    audio: true,\n    video: true\n  })\n    .then(function(stream) {\n      const audioContext = new AudioContext();\n      const analyser = audioContext.createAnalyser();\n      const microphone = audioContext.createMediaStreamSource(stream);\n      const scriptProcessor = audioContext.createScriptProcessor(2048, 1, 1);\n  \n      analyser.smoothingTimeConstant = 0.8;\n      analyser.fftSize = 64;\n  \n      microphone.connect(analyser);\n      analyser.connect(scriptProcessor);\n      scriptProcessor.connect(audioContext.destination);\n      scriptProcessor.onaudioprocess = function() {\n        const array = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(array);\n        const arraySum = array.reduce((a, value) => a + value, 0);\n        const average = arraySum / array.length;\n        updateMicAmp(average)\n      };\n    })\n    .catch(function(err) {\n      /* handle the error */\n      console.error(err);\n    });\n  }, [])\n\n\n\n  return (\n    <React.Fragment >\n           \n    </React.Fragment>\n  )  \n}\n","import { useFrame } from '@react-three/fiber'\nimport React, { useState } from 'react'\nimport { useStore } from '../state'\nimport * as THREE from 'three'\nimport { MeshWobbleMaterial } from '@react-three/drei'\n\nimport { Html } from '@react-three/drei/web/Html.cjs'\n\n/**\n * A Sphere Three.js Object, whose parameters are influences by the audio-input from the clients microphone\n * @param {object} param: The paramateters with which the 3d-Object is created. It includes:\n *  position: as an Array(3),\n *  color: as a HEX-value,\n *  size: as an Integer,\n *  heightSegments: the amount of heightSegments of the 3d-Object\n *  widthSegments: the amount of widthSegments of the 3d-Object\n *  rotX: the amount of static rotation on the x-axis\n *  rotY: the amount of static rotation on the y-axis\n *  rotZ: the amount of static rotation on the z-axis  \n * @return The react-three-fiber Sphere-Component\n**/ \nexport default function Sphere(props) {\n    const mesh = React.useRef();\n    //Visibility of ControllerInterface\n    const [ active, toggleActive ] = useState(false)\n    //Active Rotation\n    const [ activeRotation, toggleActiveRotation ] = useState(true)\n    //Amplitude of microphone input connected to global store\n    const [ amp ] = useStore(state => [ state.micAmp ])\n    //Mouse Position for positioning of controllerInterface\n    let [ mousePos, setMousePos ] = useState(new THREE.Vector3( 0, 0, -3 ));\n    //locally stored non-boolean controller variables\n    let [ cI, setCI ] = useState({\n        size: props.size,\n        color: props.color,\n        sensitivity: 1,\n        heightSegments: props.heightSegments,\n        widthSegments: props.widthSegments,\n        posX: props.position[0],\n        posY: props.position[1],\n        posZ: props.position[2],\n        rotX: props.rotX,\n        rotY: props.rotY,\n        rotZ: props.rotZ\n    })\n\n    //toggle activeRotation \n    const handleActiveRotation = ( event ) => {\n        event.preventDefault();\n        toggleActiveRotation(!activeRotation)\n    }\n\n    //update values in controllerInput\n    const handleChange = (event) => {\n        const { value, name } = event.target;\n        let newCI = {...cI}\n        newCI[name] = value;\n        setCI(newCI)\n    }\n\n    //update mousePosition in local state to position controllerInterface\n    const getMouseWorld = ( event ) => {\n        console.log(event.point)\n        var m = event.point;\n        if( m === undefined ) {\n            m = new THREE.Vector3( 0, 0, -3 )\n        }\n        else if(m.y < -0.7) {\n            m.y += 1.5;\n        }\n        setMousePos( m )\n    }\n\n    //show controllerInterface and set mouse position\n    const handleToggle = ( event ) => {\n        if(event.target.tagName !== undefined)\n            if(event.target.tagName.toLowerCase() === 'button') \n                event.preventDefault();\n        getMouseWorld(event);\n        toggleActive(!active)\n    }\n\n    const style = {\n        backgroundColor: 'grey',\n        padding: '0.6em',\n        opacity: '0.7',\n        borderRadius: '0.5em'\n        \n    }\n\n    const controllerInterface = <Html className={'geo-container'} position={ [mousePos.x, mousePos.y, mousePos.z] } rotationY={0.2}>\n                                    <div class={'hud-element'} style={style}>\n                                        <form>\n                                            <header>\n                                                <button style={{marginBottom: '1em'}} class={'button__visible'} onClick={handleToggle}>x</button>\n                                                <div>\n                                                    <label class={'hudlabel'}>{props.name}</label>\n                                                </div>\n                                            </header>\n                                            <br/>\n\n                                            <section>\n                                            <label htmlfor='color'>Farbe</label>\n                                                <br/>\n                                                <input type='color' name='color' value={cI.color} onChange={handleChange}/>\n                                            <br/>\n                                            </section>\n\n                                            <section >\n                                                <label>Position</label>\n                                                <br/>\n                                                <label htmlfor='X'>X</label>\n                                                <input type='range' min={-20} max={20} name='posX' value={cI.posX} onChange={handleChange}/>\n                                                <label htmlfor='Y'>Y</label>\n                                                <input type='range' min={-20} max={10} name='posY' value={cI.posY} onChange={handleChange}/>\n                                                <label htmlfor='Z'>Z</label>\n                                                <input type='range' min={-40} max={10} name='posZ' value={cI.posZ} onChange={handleChange}/>\n\n                                                <br/>\n                                            </section>\n\n                                            <section>\n                                                <label htmlfor='size'>Size</label>\n                                                <input type='range' name='size' min={0} max={50} value={cI.size} onChange={handleChange}/>\n\n                                                <label htmlfor='size'>Sensitivity</label>\n                                                <input type='range' min={0} max={10} name='sensitivity' value={cI.sensitivity} onChange={handleChange}/>\n\n                                                <label htmlfor='widthSegments'>widthSegments</label>\n                                                <input type='range' min={1} max={20} name='widthSegments' value={cI.widthSegments} onChange={handleChange}/> \n\n                                                <br/>\n                                            </section>\n\n                                            <section>\n\n                                            <label htmlfor='rotX'>Rotation X</label>\n                                                <input type='range' min={-100} max={100} name='rotX' value={cI.rotX} onChange={handleChange}/>\n                                                <label htmlfor='rotY'>Rotation Y</label>\n                                                <input type='range' min={-100} max={100} name='rotY' value={cI.rotY} onChange={handleChange}/>\n                                                <label htmlfor='rotZ'>Rotation Z</label>\n                                                <input type='range' min={-100} max={100} name='rotZ' value={cI.rotZ} onChange={handleChange}/>\n                                                <button onClick={handleActiveRotation}>Toggle active rotation</button>\n                                            </section>\n                                        </form>\n                                    </div>\n                                </Html>\n\n    //apply rotation on every frame\n    useFrame(() => {\n        if(activeRotation) {\n            var ampRot = amp/50;\n            mesh.current.rotation.x += (cI.rotX/1000) * ampRot;\n            mesh.current.rotation.y += (cI.rotY/1000) * ampRot;\n            mesh.current.rotation.z += (cI.rotZ/1000) * ampRot;\n        }\n    })\n\n    \n\n    return(\n        <React.Fragment>\n\n        {active ? controllerInterface : null}\n\n        <mesh\n            position={[cI.posX, cI.posY, cI.posZ]}\n            ref={mesh}\n            scale={cI.sensitivity === 0 ? cI.size/10*10 : cI.size/10+amp/40}\n            onClick={handleToggle}\n            rotation={[cI.rotX, cI.rotY, cI.rotZ]}\n            >\n            \n            <sphereGeometry args={[1, cI.heightSegments+amp*20, cI.widthSegments*(amp/35)]} />\n            \n            <MeshWobbleMaterial \n                attact='material'\n                color={cI.color}\n                side={THREE.DoubleSide}\n                factor={1*(amp)*(cI.sensitivity/10)}\n                speed={0.2*(0.01/amp)}\n                refractionRatio={3}\n                roughness={0.2}\n                wireframe={false}\n                />\n          </mesh>\n          </React.Fragment >\n\n    )\n}","import * as THREE from 'three'\nimport React, { useState } from 'react'\nimport { MeshWobbleMaterial } from '@react-three/drei'\nimport { useStore } from '../state'\nimport { Html } from '@react-three/drei/web/Html.cjs'\n\n/**\n * A Plane Three.js Object, whose parameters are influenceD by the audio-input from the clients microphone\n * @param {object} param: The paramateters with which the 3d-Object is created. It includes:\n *  position: as an Array(3),\n *  color: as a HEX-value,\n *  size: as an Integer,\n *  heightSegments: the amount of heightSegments of the 3d-Object\n *  widthSegments: the amount of widthSegments of the 3d-Object\n *  rotX: the amount of static rotation on the x-axis\n *  rotY: the amount of static rotation on the y-axis\n *  rotZ: the amount of static rotation on the z-axis  \n * @return The react-three-fiber Plane-Component\n**/ \nexport default function Plane(props) {\n    const mesh = React.useRef();\n    //Visibility of ControllerInterface\n    const [ active, toggleActive ] = useState(false)\n    //connect Wobble to amplitude\n    const [ wobble, toggleWobble ] = useState(props.reacts)\n    //Visibility of wireframe\n    const [ wireframe, toggleWireframe ] = useState(false)\n    //Amplitude of microphone input connected to global store\n    const [ amp ] = useStore(state => [ state.micAmp ])\n    //Mouse Position for positioning of controllerInterface\n    let [ mousePos, setMousePos ] = useState(new THREE.Vector3( 0, 0, -3 ));\n    //locally stored controller variables\n    let [ cI, setCI ] = useState({\n        size: props.size,\n        color: props.color,\n        factor: 0.41,\n        heightSegments: props.heightSegments,\n        widthSegments: props.widthSegments,\n\n        posX: props.position[0],\n        posY: props.position[1],\n        posZ: props.position[2],\n        rotX: props.rotX,\n        rotY: props.rotY,\n        rotZ: props.rotZ\n    })\n\n    const handleChange = ( event ) => {\n        const { value, name } = event.target;\n        let newCI = {...cI}\n        newCI[name] = value;\n        setCI(newCI)\n    }\n\n    //Toggle wireframe visibility\n    const handleWireframe = () => {\n        toggleWireframe(!wireframe)\n    }\n\n    const handleWobble = () => {\n        toggleWobble(!wobble)\n    }\n\n    const getMouseWorld = ( event ) => {\n        setMousePos( event.point )\n    }\n\n    const handleToggle = ( event ) => {\n        if(event.target.tagName !== undefined)\n            if(event.target.tagName.toLowerCase() === 'button') \n                event.preventDefault();\n        getMouseWorld(event);\n        toggleActive(!active)\n    }\n\n    const style = {\n        backgroundColor: 'grey',\n        padding: '0.6em',\n        opacity: '0.7',\n        borderRadius: '0.5em'\n    }\n\n    const controllerInterface = <Html className={'geo-container__plane'} style={style} position={ [-4, -3, -5] } rotationY={0.2}>\n                                    <div >\n                                        <form>\n                                            <header>\n                                                <button style={{marginBottom: '1em'}} class={'button__visible'} onClick={handleToggle}>x</button>\n                                                <div>\n                                                    <label class={'hudlabel'}>{props.name}</label>\n                                                </div>\n                                            <br/>\n                                            </header>\n\n                                            <section>\n                                                <div>\n                                                    <label htmlfor='color'>Farbe</label>\n                                                    <br/>\n                                                    <input type='color' name='color' value={cI.color} onChange={handleChange}/>\n                                                    <br/>\n                                                </div>\n                                                <div>                                           \n                                                    <label htmlfor='wireframe'>Wireframe On</label>\n                                                    <input type='checkbox' onChange={handleWireframe}/>\n                                                </div>\n                                                <div>\n                                                    <label htmlfor='wireframe'>Reacts</label>\n                                                    <input type='checkbox' onChange={handleWobble}/>\n                                                </div>\n                                            </section>\n\n                                            <section >\n                                                \n                                                <div>\n                                                <label htmlfor={'X'}>Position</label>\n                                                <br/>                                               \n                                                <label htmlfor='X'>X</label>\n                                                <input type='range' min={-8.8} max={8.8} name='posX' value={cI.posX} onChange={handleChange}/>\n                                                <label htmlfor='Y'>Y</label>\n                                                <input type='range' min={-20} max={10} name='posY' value={cI.posY} onChange={handleChange}/>\n                                                <label htmlfor='Z'>Z</label>\n                                                <input type='range' min={-40} max={10} name='posZ' value={cI.posZ} onChange={handleChange}/>\n                                                </div>\n                                                <br/>\n\n                                                <div>\n                                                    <label htmlfor='size'>Größe</label>\n                                                    <input type='range' name='size' min={0} max={20} value={cI.size} onChange={handleChange}/>\n\n                                                    <label htmlfor='factor'>wave factor</label>\n                                                    <input type='range' min={0} max={100} name='factor' value={cI.factor} onChange={handleChange}/>\n\n                                                    <label htmlfor='heightSegments'>heightSegments</label>\n                                                    <input type='range' min={1} max={200} name='heightSegments' value={cI.heightSegments} onChange={handleChange}/>\n\n                                                    <label htmlfor='widthSegments'>widthSegments</label>\n                                                    <input type='range' min={1} max={200} name='widthSegments' value={cI.widthSegments} onChange={handleChange}/> \n\n                                                    <br/>\n                                                </div>\n\n                                                <div>\n                                                    <label htmlfor='rotX'>Rotation X</label>\n                                                    <input type='range' min={-360} max={360} name='rotX' value={cI.rotX} onChange={handleChange}/>\n                                                    <label htmlfor='rotY'>Rotation Y</label>\n                                                    <input type='range' min={-360} max={360} name='rotY' value={cI.rotY} onChange={handleChange}/>\n                                                    <label htmlfor='rotZ'>Rotation Z</label>\n                                                    <input type='range' min={-360} max={360} name='rotZ' value={cI.rotZ} onChange={handleChange}/>\n                                                </div> \n                                            </section>\n\n\n                                        </form>\n                                    </div>\n                                </Html>\n\n\n    return(\n        <React.Fragment>\n\n        {active ? controllerInterface : null}\n\n        <mesh\n            position={[cI.posX, cI.posY, cI.posZ]}\n            ref={mesh}\n            scale={cI.size* 0.001}\n            onClick={handleToggle}\n            rotation={[cI.rotX/100, cI.rotY/100, cI.rotZ/100]}\n            >\n            \n            <planeGeometry \n                args={[1000, 1000, cI.heightSegments, cI.widthSegments]} \n                />\n            <MeshWobbleMaterial \n                attact='material'\n                color={cI.color}\n                side={THREE.DoubleSide}\n                factor={wobble ? (cI.factor/10) + amp/180 : cI.factor/100}\n                speed={1}\n                refractionRatio={3}\n                roughness={0.2}\n                wireframe={wireframe}\n                />\n\n          </mesh>\n          </React.Fragment >\n\n    )\n}","export default __webpack_public_path__ + \"static/media/topfont.8c27589b.png\";","import React, { useState } from 'react';\nimport Sphere from './Sphere';\nimport Plane from './Plane';\nimport { Html } from '@react-three/drei/web/Html.cjs'\nimport topfont from './img/topfont.png'\n\nconst style = {\n    backgroundColor: 'grey',\n    padding: '0.6em',\n    opacity: '0.7',\n    borderRadius: '0.5em',\n    font: 'Arial'\n}\n\n/**\n * GeometryContainer\n * @returns React.Component containing a html interface to manage the geometry\n */\nexport default function GeoContainer() {\n    //An array containing all the geometries being rendered on screen\n    const [ geometries, updateGeometry ] = useState([\n        <Sphere type={'Sphere'} name={'Sphere1'} position={[0, 0, -4]} color={'#ECB365'} size={10} heightSegments={2} widthSegments={10} rotX={-28} rotY={-12} rotZ={-10}/>,\n        <Plane type={'Plane'} name={'Background'} reacts={true} position={[-2.8, -10, -1]} color={\"#041C32\"} size={100} heightSegments={50} widthSegments={50} rotX={-65} rotY={-1} rotZ={2}/>                              \n    ])\n    \n    const [ fogColor, setFogColor ] = useState('darkgrey') \n    const [ fogOn, setFogOn ] = useState(true) \n\n    //Name of new Geometry\n    const [ newName, updateNewName ] = useState('');\n\n    //Toggle visibility\n    const [ visible, toggleVisibility ] = useState('true')\n\n    //Build Display of geometry\n    const getGeoLI = ( name, index ) => {\n        return <li className={'geolist'} index={index} >\n                    {name}\n                    <br/>\n                    <button onClick={removeGeometry}>remove</button>\n                </li>\n    }\n\n    //Add a geometry to the scene\n    const addGeometry = ( event ) => {\n        event.preventDefault();\n        var select = document.getElementById(\"selectType\")\n        var selectedIndex = select.selectedIndex;\n        var newArray = geometries;\n        var newGeo;\n        switch (selectedIndex) {\n        case 0:\n            newGeo = <Sphere type={'Sphere'} name={newName} position={[-6.5, 4, -2]} color={'green'} size={10} heightSegments={2} widthSegments={10} rotX={-28} rotY={-12} rotZ={-10}/>\n            \n            newArray.push(newGeo)\n            updateGeometry([...geometries])\n            break;\n        case 1:\n            newGeo = <Plane type={'Plane'} name={newName} position={[-2.8, 0, -1]} color={\"red\"} size={10} heightSegments={50} widthSegments={50} rotX={45} rotY={-1} rotZ={2}/>\n            \n            geometries.push(newGeo)\n            updateGeometry([...geometries])\n            break;\n        default:\n            console.log('a geometry-type needs to be selected')\n        \n        }\n    }\n\n    //remove a geometry from the scene\n    const removeGeometry = ( event ) => {\n        const index = event.target.closest('li').getAttribute('index')\n        geometries.splice(index, 1)\n        console.log(geometries)\n\n        updateGeometry([...geometries])\n    }\n\n    const handleFogColor = (event) => {\n        setFogColor(event.target.value)\n    }\n\n    const handleFogOn = (event) => {\n        setFogOn(!fogOn)\n    }\n\n\n    //Handle Change in input field, to differentiate between new geos in list\n    const handleChange = ( event ) => {\n        const  value  = event.target.value\n\n        updateNewName(value)\n    }\n\n    //Toggle Visibility of interface\n    const handleToggle = () => {\n        toggleVisibility(!visible);\n    }\n\n    //hidden version of the interface\n    const inVisible = <p class={'button__hidden'}onClick={handleToggle}>Show</p>\n    //visible version of the interface\n    const Visible = <div class={'hud-element'} style={style}>                   \n                        <header>\n                            <button class={'button__visible'} onClick={handleToggle}>x</button>\n                            <img class={'icon__visible'}src={topfont}/>\n                        </header>\n\n                        <section>\n                            <form>\n                                <label>Fog on</label>\n                                <input type='checkbox' checked onChange={handleFogOn}/>\n                                <label>FogColor</label>\n                                <input type='color' onChange={handleFogColor}/>\n                            </form>\n                        </section>\n\n                        <section>\n                            <form>\n                                <h4 >Create new geometry:</h4>\n                                <select id={\"selectType\"}>\n                                    <option value={'sphere'}>Sphere</option>\n                                    <option value={'plane'}>Plane</option>\n                                </select>\n                                <input type={'text'} value={newName} onChange={handleChange} />\n                                <button onClick={addGeometry}> Add Geometry</button>\n                            </form>\n                        </section>\n                        <label >All Geometries</label>\n                        <ul >\n                            {geometries.map(( geo, index ) => getGeoLI(geo.props.name, index))}   \n                        </ul>\n                    </div>\n    \n    return (\n        <React.Fragment>\n\n        <Html  width={12} position={[-3.5, 6, -3]}>\n            \n                { visible ? Visible : inVisible } \n           \n        </Html>\n        {fogOn ? <fog attach=\"fog\" args={[fogColor, 5, 40]} /> : null }\n\n        {geometries.map(geo => geo)}\n        </React.Fragment>\n    )\n}","import { Canvas } from '@react-three/fiber'\nimport React from 'react'\nimport AudioAnalyser from './components/AudioAnalyser';\nimport GeoContainer from './components/GeoContainer';\n\n\n/**\n * App-Component: contains THREE-Canvas, geometries, GeoContainer and AudioAnalyser\n **/\nclass App extends React.Component {\n  render() {\n    return (\n      <div style={{height: '1000px', margin: '-200px', height: '2000em', backgroundColor:'black'}} >\n        <Canvas   pixelRatio={window.devicePixelRatio}\n                  invalidateFrameloop={false}\n                  style={{ position: 'absolute', left: '0', top: '0', width: '100%', height: '100%' }}>\n          <ambientLight />\n\n          <pointLight position={[10, 10, 10]} />\n\n          <GeoContainer />   \n\n          <AudioAnalyser />     \n        </Canvas>              \n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n          <App />,\n  document.getElementById('root')\n);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}