{"version":3,"sources":["state.js","components/AudioAnalyser.js","components/Sphere.js","components/Plane.js","components/img/topfont.png","components/GeoContainer.js","App.js","reportWebVitals.js","index.js"],"names":["useStore","create","set","micAmp","updateMicAmp","amp","state","AudioAnalyser","navigator","mediaDevices","enumerateDevices","console","error","useEffect","getUserMedia","audio","video","then","stream","audioContext","AudioContext","analyser","createAnalyser","microphone","createMediaStreamSource","scriptProcessor","createScriptProcessor","smoothingTimeConstant","fftSize","connect","destination","onaudioprocess","array","Uint8Array","frequencyBinCount","getByteFrequencyData","average","reduce","a","value","length","catch","err","Sphere","props","mesh","React","useRef","useState","active","toggleActive","activeRotation","toggleActiveRotation","THREE","mousePos","setMousePos","size","color","sensitivity","heightSegments","widthSegments","posX","position","posY","posZ","rotX","rotY","rotZ","cI","setCI","handleChange","event","target","name","newCI","handleToggle","undefined","tagName","toLowerCase","preventDefault","m","point","y","getMouseWorld","controllerInterface","className","x","z","rotationY","style","marginBottom","onClick","type","onChange","min","max","useFrame","ampRot","current","rotation","Fragment","ref","scale","args","MeshWobbleMaterial","attact","side","factor","speed","refractionRatio","roughness","wireframe","Plane","reacts","wobble","toggleWobble","toggleWireframe","htmlfor","backgroundColor","padding","opacity","borderRadius","font","GeoContainer","geometries","updateGeometry","fogColor","setFogColor","fogOn","setFogOn","newName","updateNewName","visible","toggleVisibility","removeGeometry","index","closest","getAttribute","splice","inVisible","Visible","src","topfont","alt","checked","id","newGeo","document","getElementById","selectedIndex","push","alert","map","geo","getGeoLI","width","attach","App","margin","pixelRatio","window","devicePixelRatio","invalidateFrameloop","left","top","height","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.83ed57d5.chunk.js","sourcesContent":["import create from 'zustand'\n\n/**\n * @description pmndrs state management component. Used to handle changes in the users mic-input and inform the geometries. \n * @method updateMicAmp(amp): update microphone amplitude in global state \n * @attribute micAmp: microphone amplitude as whole integer\n */\nexport const useStore = create(( set ) => ({\n    micAmp: 25,\n    updateMicAmp: (amp) => {        \n        return set(state => ({micAmp: amp}))\n    }, \n  })) \n  ","import React, { useEffect } from 'react';\nimport { useStore } from '../state';\n\n\nexport default function AudioAnalyser() {\n  const [updateMicAmp] = useStore(state => [ state.updateMicAmp ])\n\n  /**\n   * @description case privacy doesnt allow access\n   */\n  if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n    console.error(\"enumerateDevices() not supported.\");   \n  }\n  \n  /**\n   * @description Works analogous to onComponentDidMount. Sets up stream for continuous use.\n   */\n  useEffect(() => {\n    //get Permission to read System inputs and outputs and add eventlistener to process input stream\n    navigator.mediaDevices.getUserMedia({\n    audio: true,\n    video: true\n  })\n    .then(function(stream) {\n      const audioContext = new AudioContext();\n      const analyser = audioContext.createAnalyser();\n      const microphone = audioContext.createMediaStreamSource(stream);\n      const scriptProcessor = audioContext.createScriptProcessor(2048, 1, 1);\n  \n      analyser.smoothingTimeConstant = 0.8;\n      analyser.fftSize = 64;\n  \n      microphone.connect(analyser);\n      analyser.connect(scriptProcessor);\n      scriptProcessor.connect(audioContext.destination);\n      scriptProcessor.onaudioprocess = function() {\n        const array = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(array);\n        const arraySum = array.reduce((a, value) => a + value, 0);\n        const average = arraySum / array.length;\n        updateMicAmp(average)\n      };\n    })\n    .catch(function(err) {\n      /* handle the error */\n      console.error(err);\n    });\n  }, [])\n\n\n  //Empty return so that Component is included  React Render-Loop\n  return (\n    <></>\n  )  \n}\n","import { useFrame } from '@react-three/fiber'\nimport React, { useState } from 'react'\nimport { useStore } from '../state'\nimport * as THREE from 'three'\nimport { MeshWobbleMaterial } from '@react-three/drei'\nimport { Html } from '@react-three/drei/web/Html.cjs'\n\n/**\n * A Sphere Three.js Object, whose parameters are influences by the audio-input from the clients microphone\n * @param {object} param: The paramateters with which the 3d-Object is created. It includes:\n *  position: as an Array(3),\n *  color: as a HEX-value,\n *  size: as an Integer,\n *  heightSegments: the amount of heightSegments of the 3d-Object\n *  widthSegments: the amount of widthSegments of the 3d-Object\n *  rotX: the amount of static rotation on the x-axis\n *  rotY: the amount of static rotation on the y-axis\n *  rotZ: the amount of static rotation on the z-axis  \n * @return The react-three-fiber Sphere-Component\n**/ \nexport default function Sphere(props) {\n    const mesh = React.useRef();\n    //Visibility of ControllerInterface\n    const [ active, toggleActive ] = useState(false)\n    //Active Rotation\n    const [ activeRotation, toggleActiveRotation ] = useState(true)\n    //Amplitude of microphone input connected to global store\n    const [ amp ] = useStore(state => [ state.micAmp ])\n    //Mouse Position for positioning of controllerInterface\n    let [ mousePos, setMousePos ] = useState(new THREE.Vector3( 0, 0, -3 ));\n    //locally stored non-boolean controller variables\n    let [ cI, setCI ] = useState({\n        size: props.size,\n        color: props.color,\n        sensitivity: 1,\n        heightSegments: props.heightSegments,\n        widthSegments: props.widthSegments,\n        posX: props.position[0],\n        posY: props.position[1],\n        posZ: props.position[2],\n        rotX: props.rotX,\n        rotY: props.rotY,\n        rotZ: props.rotZ\n    })\n\n    /**\n     * @description toggles active rotation on/off\n     * @param {event} event \n     * @returns void\n     */\n    const handleActiveRotation = ( event ) => {\n        event.preventDefault();\n        toggleActiveRotation(!activeRotation)\n    }\n\n    /**\n     * @description update values in controllerInput\n     * @param {event} event\n     * @returns void\n     */\n    const handleChange = (event) => {\n        const { value, name } = event.target;\n        let newCI = {...cI}\n        newCI[name] = value;\n        setCI(newCI)\n    }\n\n    /**\n     * @description update mousePosition in local state to position controllerInterface\n     * @param {event} event \n     * @returns void\n     */\n    const getMouseWorld = ( event ) => {\n        var m = event.point;\n        if( m === undefined ) {\n            m = new THREE.Vector3( 0, 0, -3 )\n        }\n        else if(m.y < -0.7) {\n            m.y += 1.5;\n        }\n        setMousePos( m )\n    }\n\n    /**\n     * @description show controllerInterface and set mouse position\n     * @param {event} event \n     * @returns void\n     */\n    const handleToggle = ( event ) => {\n        if(event.target.tagName !== undefined)\n            if(event.target.tagName.toLowerCase() === 'button') \n                event.preventDefault();\n        getMouseWorld(event);\n        toggleActive(!active)\n    }\n\n    \n    /**\n     * @description Geometry parameters are manipulated here.\n     * @returns JSX for controllerInterface.\n     */\n    const controllerInterface = <Html className={'geo-container'} position={ [mousePos.x, mousePos.y, mousePos.z] } rotationY={0.2}>\n                                    <div className={'hud-element'}>\n                                        <form>\n                                            <header>\n                                                <button style={{marginBottom: '1em'}} className={'button__visible'} onClick={handleToggle}>x</button>\n                                                <div>\n                                                    <label className={'hudlabel'}>{props.name}</label>\n                                                </div>\n                                            </header>\n                                            <br/>\n\n                                            <section>\n                                            <label >Farbe</label>\n                                                <br/>\n                                                <input type='color' name='color' value={cI.color} onChange={handleChange}/>\n                                            <br/>\n                                            </section>\n\n                                            <section >\n                                                <label>Position</label>\n                                                <br/>\n                                                <label >X</label>\n                                                <input type='range' min={-20} max={20} name='posX' value={cI.posX} onChange={handleChange}/>\n                                                <label >Y</label>\n                                                <input type='range' min={-20} max={10} name='posY' value={cI.posY} onChange={handleChange}/>\n                                                <label >Z</label>\n                                                <input type='range' min={-40} max={10} name='posZ' value={cI.posZ} onChange={handleChange}/>\n\n                                                <br/>\n                                            </section>\n\n                                            <section>\n                                                <label >Size</label>\n                                                <input type='range' name='size' min={0} max={50} value={cI.size} onChange={handleChange}/>\n\n                                                <label >Sensitivity</label>\n                                                <input type='range' min={0} max={10} name='sensitivity' value={cI.sensitivity} onChange={handleChange}/>\n\n                                                <label >widthSegments</label>\n                                                <input type='range' min={1} max={20} name='widthSegments' value={cI.widthSegments} onChange={handleChange}/> \n\n                                                <br/>\n                                            </section>\n\n                                            <section>\n                                                <label >Rotation X</label>\n                                                <input type='range' min={-100} max={100} name='rotX' value={cI.rotX} onChange={handleChange}/>\n                                                <label >Rotation Y</label>\n                                                <input type='range' min={-100} max={100} name='rotY' value={cI.rotY} onChange={handleChange}/>\n                                                <label >Rotation Z</label>\n                                                <input type='range' min={-100} max={100} name='rotZ' value={cI.rotZ} onChange={handleChange}/>\n                                                <button onClick={handleActiveRotation}>Toggle active rotation</button>\n                                            </section>\n                                        </form>\n                                    </div>\n                                </Html>\n\n    /**\n     * @description Apply rotation on every frame.\n     */\n    useFrame(() => {\n        if(activeRotation) {\n            var ampRot = amp/50;\n            mesh.current.rotation.x += (cI.rotX/1000) * ampRot;\n            mesh.current.rotation.y += (cI.rotY/1000) * ampRot;\n            mesh.current.rotation.z += (cI.rotZ/1000) * ampRot;\n        }\n    })\n\n    \n\n    return (\n        <React.Fragment>\n\n            {active ? controllerInterface : null}\n\n            <mesh\n                position={[cI.posX, cI.posY, cI.posZ]}\n                ref={mesh}\n                scale={cI.sensitivity === 0 ? cI.size/10*10 : cI.size/10+amp/40}\n                onClick={handleToggle}\n                rotation={[cI.rotX, cI.rotY, cI.rotZ]}\n                >\n                <sphereGeometry args={[1, cI.heightSegments+amp*20, cI.widthSegments*(amp/35)]} />\n                <MeshWobbleMaterial \n                    attact='material'\n                    color={cI.color}\n                    side={THREE.DoubleSide}\n                    factor={1*(amp)*(cI.sensitivity/10)}\n                    speed={0.2*(0.01/amp)}\n                    refractionRatio={3}\n                    roughness={0.2}\n                    wireframe={false}\n                    />\n            </mesh>\n\n          </React.Fragment >\n\n    )\n}","import * as THREE from 'three'\nimport React, { useState } from 'react'\nimport { MeshWobbleMaterial } from '@react-three/drei'\nimport { useStore } from '../state'\nimport { Html } from '@react-three/drei/web/Html.cjs'\n\n/**\n * A Plane Three.js Object, whose parameters are influenceD by the audio-input from the clients microphone\n * @param {object} param: The paramateters with which the 3d-Object is created. It includes:\n *  position: as an Array(3),\n *  color: as a HEX-value,\n *  size: as an Integer,\n *  heightSegments: the amount of heightSegments of the 3d-Object\n *  widthSegments: the amount of widthSegments of the 3d-Object\n *  rotX: the amount of static rotation on the x-axis\n *  rotY: the amount of static rotation on the y-axis\n *  rotZ: the amount of static rotation on the z-axis  \n * @return The react-three-fiber Plane-Component\n**/ \nexport default function Plane(props) {\n    const mesh = React.useRef();\n    //Visibility of ControllerInterface\n    const [ active, toggleActive ] = useState(false)\n    //connect Wobble to amplitude\n    const [ wobble, toggleWobble ] = useState(props.reacts)\n    //Visibility of wireframe\n    const [ wireframe, toggleWireframe ] = useState(false)\n    //Amplitude of microphone input connected to global store\n    const [ amp ] = useStore(state => [ state.micAmp ])\n    //Mouse Position for positioning of controllerInterface\n    let [ mousePos, setMousePos ] = useState(new THREE.Vector3( 0, 0, -3 ));\n    //locally stored controller variables\n    let [ cI, setCI ] = useState({\n        size: props.size,\n        color: props.color,\n        factor: 0.41,\n        heightSegments: props.heightSegments,\n        widthSegments: props.widthSegments,\n\n        posX: props.position[0],\n        posY: props.position[1],\n        posZ: props.position[2],\n        rotX: props.rotX,\n        rotY: props.rotY,\n        rotZ: props.rotZ\n    })\n\n    /**\n     * @description Handle change in controllerInterface\n     * @param {event} event \n     */\n    const handleChange = ( event ) => {\n        const { value, name } = event.target;\n        let newCI = {...cI}\n        newCI[name] = value;\n        setCI(newCI)\n    }\n\n    /**\n     * @description Toggle wireframe visibility\n     * \n     */\n    const handleWireframe = () => {\n        toggleWireframe(!wireframe)\n    }\n\n    /**\n     * @description Toggle wobble-material\n     * \n     */\n    const handleWobble = () => {\n        toggleWobble(!wobble)\n    }\n\n    /**\n     * @description Get and set mouse position on click \n     * @param {event} event \n     * \n     */\n    const getMouseWorld = ( event ) => {\n        setMousePos( event.point )\n    }\n\n    /**\n     * @description Toggle controllerInterface visibility\n     * @param {event} event\n     */\n    const handleToggle = ( event ) => {\n        if(event.target.tagName !== undefined)\n            if(event.target.tagName.toLowerCase() === 'button') \n                event.preventDefault();\n        getMouseWorld(event);\n        toggleActive(!active)\n    }\n\n    /**\n     * @description Geometry parameters are manipulated here.\n     * @returns JSX for controllerInterface.\n     */\n    const controllerInterface = <Html className={'geo-container__plane'} position={ [-4, -3, -5] } rotationY={0.2}>\n                                    <div >\n                                        <form>\n                                            <header>\n                                                <button style={{marginBottom: '1em'}} className={'button__visible'} onClick={handleToggle}>x</button>\n                                                <div>\n                                                    <label className={'hudlabel'}>{props.name}</label>\n                                                </div>\n                                            <br/>\n                                            </header>\n\n                                            <section>\n                                                <div>\n                                                    <label >Farbe</label>\n                                                    <br/>\n                                                    <input type='color' name='color' value={cI.color} onChange={handleChange}/>\n                                                    <br/>\n                                                </div>\n                                                <div>                                           \n                                                    <label >Wireframe On</label>\n                                                    <input type='checkbox' onChange={handleWireframe}/>\n                                                </div>\n                                                <div>\n                                                    <label >Reacts</label>\n                                                    <input type='checkbox' onChange={handleWobble}/>\n                                                </div>\n                                            </section>\n\n                                            <section >\n                                                \n                                                <div>\n                                                <label htmlfor={'X'}>Position</label>\n                                                <br/>                                               \n                                                <label htmlfor='X'>X</label>\n                                                <input type='range' min={-8.8} max={8.8} name='posX' value={cI.posX} onChange={handleChange}/>\n                                                <label htmlfor='Y'>Y</label>\n                                                <input type='range' min={-20} max={10} name='posY' value={cI.posY} onChange={handleChange}/>\n                                                <label htmlfor='Z'>Z</label>\n                                                <input type='range' min={-40} max={10} name='posZ' value={cI.posZ} onChange={handleChange}/>\n                                                </div>\n                                                <br/>\n\n                                                <div>\n                                                    <label htmlfor='size'>Größe</label>\n                                                    <input type='range' name='size' min={0} max={20} value={cI.size} onChange={handleChange}/>\n\n                                                    <label htmlfor='factor'>wave factor</label>\n                                                    <input type='range' min={0} max={100} name='factor' value={cI.factor} onChange={handleChange}/>\n\n                                                    <label htmlfor='heightSegments'>heightSegments</label>\n                                                    <input type='range' min={1} max={200} name='heightSegments' value={cI.heightSegments} onChange={handleChange}/>\n\n                                                    <label htmlfor='widthSegments'>widthSegments</label>\n                                                    <input type='range' min={1} max={200} name='widthSegments' value={cI.widthSegments} onChange={handleChange}/> \n\n                                                    <br/>\n                                                </div>\n\n                                                <div>\n                                                    <label htmlfor='rotX'>Rotation X</label>\n                                                    <input type='range' min={-360} max={360} name='rotX' value={cI.rotX} onChange={handleChange}/>\n                                                    <label htmlfor='rotY'>Rotation Y</label>\n                                                    <input type='range' min={-360} max={360} name='rotY' value={cI.rotY} onChange={handleChange}/>\n                                                    <label htmlfor='rotZ'>Rotation Z</label>\n                                                    <input type='range' min={-360} max={360} name='rotZ' value={cI.rotZ} onChange={handleChange}/>\n                                                </div> \n                                            </section>\n\n\n                                        </form>\n                                    </div>\n                                </Html>\n\n\n    return (\n        <React.Fragment>\n\n            {active ? controllerInterface : null}\n\n            <mesh\n                position={[cI.posX, cI.posY, cI.posZ]}\n                ref={mesh}\n                scale={cI.size* 0.001}\n                onClick={handleToggle}\n                rotation={[cI.rotX/100, cI.rotY/100, cI.rotZ/100]}\n                >\n                <planeGeometry \n                    args={[1000, 1000, cI.heightSegments, cI.widthSegments]} \n                    />\n                <MeshWobbleMaterial \n                    attact='material'\n                    color={cI.color}\n                    side={THREE.DoubleSide}\n                    factor={wobble ? (cI.factor/10) + amp/180 : cI.factor/100}\n                    speed={1}\n                    refractionRatio={3}\n                    roughness={0.2}\n                    wireframe={wireframe}\n                    />\n            </mesh>\n\n          </React.Fragment >\n\n    )\n}","export default __webpack_public_path__ + \"static/media/topfont.8c27589b.png\";","import React, { useState } from 'react';\nimport Sphere from './Sphere';\nimport Plane from './Plane';\nimport { Html } from '@react-three/drei/web/Html.cjs'\nimport topfont from './img/topfont.png'\n\nconst style = {\n    backgroundColor: 'grey',\n    padding: '0.6em',\n    opacity: '0.7',\n    borderRadius: '0.5em',\n    font: 'Arial'\n}\n\n/**\n * GeometryContainer\n * @returns React.Component containing a html interface to manage the geometry\n */\nexport default function GeoContainer() {\n    //An array containing all the geometries being rendered on screen\n    const [ geometries, updateGeometry ] = useState([\n        <Sphere type={'Sphere'} name={'Sphere1'} position={[0, 0, -4]} color={'#ECB365'} size={10} heightSegments={2} widthSegments={10} rotX={-28} rotY={-12} rotZ={-10}/>,\n        <Plane type={'Plane'} name={'Background'} reacts={true} position={[-2.8, -10, -1]} color={\"#041C32\"} size={100} heightSegments={50} widthSegments={50} rotX={-65} rotY={-1} rotZ={2}/>                              \n    ])\n    \n    //Fog Control\n    const [ fogColor, setFogColor ] = useState('darkgrey') \n    const [ fogOn, setFogOn ] = useState(true) \n\n    //Name of new Geometry\n    const [ newName, updateNewName ] = useState('');\n\n    //Toggle visibility\n    const [ visible, toggleVisibility ] = useState('true')\n\n    //Build li-element of geometry\n    const getGeoLI = ( name, index ) => {\n        return <div key={index} className={'geolist'} index={index}>\n                    {name}\n                    <br/>\n                    <button onClick={removeGeometry}>remove</button>\n                </div>\n    }\n\n    /**\n     * @description Add a geometry to the scene.\n     * @param {event} event \n     * @returns void\n     */\n    const addGeometry = ( event ) => {\n        event.preventDefault();\n        if(newName.length === 0) {\n            alert(\"Geometry must be named\")\n            return;\n        }\n        var select = document.getElementById(\"selectType\")\n        var selectedIndex = select.selectedIndex;\n        var newGeo;\n\n        //distinguish geometry type and create new geometry\n        switch (selectedIndex) {\n            case 0:\n                newGeo = <Sphere type={'Sphere'} name={newName} position={[-6.5, 4, -2]} color={'green'} size={10} heightSegments={2} widthSegments={10} rotX={-28} rotY={-12} rotZ={-10}/>\n                \n                geometries.push(newGeo)\n                updateGeometry([...geometries])\n                break;\n            case 1:\n                newGeo = <Plane type={'Plane'} name={newName} position={[-2.8, 0, -1]} color={\"red\"} size={10} heightSegments={50} widthSegments={50} rotX={45} rotY={-1} rotZ={2}/>\n                \n                geometries.push(newGeo)\n                updateGeometry([...geometries])\n                break;\n            default:\n                console.error('a geometry-type needs to be selected')\n\n        }\n    }\n\n    /**\n     * @description Remove a geometry from the scene.\n     * @param {event} event \n     * @returns void\n     */\n    const removeGeometry = ( event ) => {\n        const index = event.target.closest('div').getAttribute('index')\n        geometries.splice(index, 1)\n        updateGeometry([...geometries])\n    }\n\n    /**\n     * @description Handle color change for fog.\n     * @param {event} event \n     * @returns void\n     */\n    const handleFogColor = (event) => {\n        setFogColor(event.target.value)\n    }\n\n    /**\n     * @description Toggle fog on/off.\n     * @param {event} event\n     * @returns void\n     */\n    const handleFogOn = () => {\n        setFogOn(!fogOn)\n    }\n\n    /**\n     * @description Handle change in input field, to differentiate between new geos in list.\n     * @param {event} event \n     * @returns void\n     */\n    const handleChange = ( event ) => {\n        const  value  = event.target.value\n        updateNewName(value)\n    }\n\n    /**\n     * @description Toggle Visibility of interface.\n     * @param {event} event\n     * @returns void\n     */\n    const handleToggle = () => {\n        toggleVisibility(!visible);\n    }\n    \n    /**\n     * @description Hidden version of the interface.\n     * @returns JSX <p>-tag of GeoContainer to switch back to visible mode.\n     */\n    const inVisible = <p className={'button__hidden'}onClick={handleToggle}>Show</p>\n\n    /**\n     * @description Visible version of the interface.\n     * @returns JSX of GeoContainer-HUD\n     */\n    const Visible = <div className={'hud-element'} style={style}>                   \n                        <header>\n                            <button className={'button__visible'} onClick={handleToggle}>x</button>\n                            <img className={'icon__visible'}src={topfont} alt={'RYTHMVIBES'}/>\n                        </header>\n\n                        <section>\n                            <form>\n                                <label>Fog on</label>\n                                <input type='checkbox' checked onChange={handleFogOn}/>\n                                <label>FogColor</label>\n                                <input type='color' onChange={handleFogColor}/>\n                            </form>\n                        </section>\n\n                        <section>\n                            <form>\n                                <h4 >Create new geometry:</h4>\n                                <select id={\"selectType\"}>\n                                    <option value={'sphere'}>Sphere</option>\n                                    <option value={'plane'}>Plane</option>\n                                </select>\n                                <input type={'text'} value={newName} onChange={handleChange} />\n                                <button onClick={addGeometry}> Add Geometry</button>\n                            </form>\n                        </section>\n\n                        <div className={'all-geometries'}>\n                            <label >All Geometries</label>\n                            <ul >\n                                {geometries.map(( geo, index ) => getGeoLI(geo.props.name, index))}   \n                            </ul>\n                        </div>\n                    </div>\n    \n    return (\n        <React.Fragment>\n\n            <Html   width={12} position={[-3.5, 6, -3]}>\n                { visible ? Visible : inVisible } \n            </Html>\n\n            {fogOn ? <fog attach=\"fog\" args={[fogColor, 5, 40]} /> : null }\n\n            {geometries.map(geo => geo)}\n\n        </React.Fragment>\n    )\n}","import { Canvas } from '@react-three/fiber'\nimport React from 'react'\nimport AudioAnalyser from './components/AudioAnalyser';\nimport GeoContainer from './components/GeoContainer';\n\n\n/**\n * App-Component: contains THREE-Canvas, geometries, GeoContainer and AudioAnalyser\n **/\nclass App extends React.Component {\n  render() {\n    return (\n      <div style={{margin: '-200px', backgroundColor:'black'}} >\n        <Canvas   pixelRatio={window.devicePixelRatio}\n                  invalidateFrameloop={false}\n                  style={{ position: 'absolute', left: '0', top: '0', width: '100%', height: '100%' }}>\n          <ambientLight />\n\n          <pointLight position={[10, 10, 10]} />\n\n          <GeoContainer />   \n\n          <AudioAnalyser />     \n        </Canvas>              \n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n          <App />,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}